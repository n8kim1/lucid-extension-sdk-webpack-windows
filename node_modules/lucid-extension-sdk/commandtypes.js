"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZOrderOperation = exports.isRawSendXHRResponse = exports.MermaidDiagramType = exports.GetLLMContextType = exports.GetItemsAtSearchType = exports.GetDocumentChunksType = exports.HashAlgorithmEnum = exports.AuthorizationFlowHandlerStage = exports.commandTitles = void 0;
const checks_1 = require("./core/checks");
/** @ignore */
exports.commandTitles = new Map([
    ["aafh" /* CommandName.AddAuthorizationFlowHandler */, 'AddAuthorizationFlowHandler'],
    ["aci" /* CommandName.AddCardIntegration */, 'AddCardIntegration'],
    ["adfm" /* CommandName.AddDiagramFromMermaid */, 'AddDiagramFromMermaid'],
    ["luma" /* CommandName.AddDiagramFromLuma */, 'AddDiagramFromLuma'],
    ["adft" /* CommandName.AddDiagramFromText */, 'AddDiagramFromText'],
    ["alta" /* CommandName.AddLineTextArea */, 'AddLineTextArea'],
    ["ami" /* CommandName.AddMenuItem */, 'AddMenuItem'],
    ["aqa" /* CommandName.AddQuickAction */, 'AddQuickAction'],
    ["asd" /* CommandName.AddShapeData */, 'AddShapeData'],
    ["asi" /* CommandName.AddSpreadsheetIntegration */, 'AddSpreadsheetIntegration'],
    ["atc" /* CommandName.AddTableColumn */, 'AddTableColumn'],
    ["atr" /* CommandName.AddTableRow */, 'AddTableRow'],
    ["a" /* CommandName.Alert */, 'Alert'],
    ["av" /* CommandName.AnimateViewport */, 'AnimateViewport'],
    ["adi" /* CommandName.AwaitDataSourceImport */, 'AwaitDataSourceImport'],
    ["ai" /* CommandName.AwaitImport */, 'AwaitImport'],
    ["b" /* CommandName.Bootstrap */, 'Bootstrap'],
    ["ceps" /* CommandName.CanEditPackageSettings */, 'CanEditPackageSettings'],
    ["cdc" /* CommandName.CancelDragBlockToCanvas */, 'CancelDragBlockToCanvas'],
    ["c" /* CommandName.Confirm */, 'Confirm'],
    ["cb" /* CommandName.CreateBlock */, 'CreateBlock'],
    ["cc" /* CommandName.CreateCollection */, 'CreateCollection'],
    ["cds" /* CommandName.CreateDataSource */, 'CreateDataSource'],
    ["cde" /* CommandName.CreateDocumentElement */, 'CreateDocumentElement'],
    ["cg" /* CommandName.CreateGroup */, 'CreateGroup'],
    ["cl" /* CommandName.CreateLine */, 'CreateLine'],
    ["cp" /* CommandName.CreatePage */, 'CreatePage'],
    ["die" /* CommandName.DataItemExists */, 'DataItemExists'],
    ["dde" /* CommandName.DeleteDocumentElement */, 'DeleteDocumentElement'],
    ["di" /* CommandName.DeleteItem */, 'DeleteItem'],
    ["dp" /* CommandName.DeletePage */, 'DeletePage'],
    ["dsd" /* CommandName.DeleteShapeData */, 'DeleteShapeData'],
    ["dtc" /* CommandName.DeleteTableColumn */, 'DeleteTableColumn'],
    ["dtr" /* CommandName.DeleteTableRow */, 'DeleteTableRow'],
    ["d" /* CommandName.Download */, 'Download'],
    ["dpm" /* CommandName.DragPointerMove */, 'DragPointerMove'],
    ["dpu" /* CommandName.DragPointerUp */, 'DragPointerUp'],
    ["dis" /* CommandName.DuplicateItems */, 'DuplicateItems'],
    ["ee" /* CommandName.ElementExists */, 'ElementExists'],
    ["ef" /* CommandName.ExecuteFormula */, 'ExecuteFormula'],
    ["fas" /* CommandName.FindAvailableSpace */, 'FindAvailableSpace'],
    ["fbe" /* CommandName.FireBeaconEvent */, 'FireBeaconEvent'],
    ["gcl" /* CommandName.GetConnectedLines */, 'GetConnectedLines'],
    ["gcp" /* CommandName.GetCurrentPage */, 'GetCurrentPage'],
    ["gcs" /* CommandName.GetCustomShape */, 'GetCustomShape'],
    ["gdif" /* CommandName.GetDataItemField */, 'GetDataItemField'],
    ["gdap" /* CommandName.GetDocumentAccessPermission */, 'GetDocumentAccessPermission'],
    ["gdc" /* CommandName.GetDocumentChunks */, 'GetDocumentChunks'],
    ["gdid" /* CommandName.GetDocumentId */, 'GetDocumentId'],
    ["get" /* CommandName.GetElementType */, 'GetElementType'],
    ["gec" /* CommandName.GetEnvironmentConfig */, 'GetEnvironmentConfig'],
    ["gip" /* CommandName.GetItemPageId */, 'GetItemPageId'],
    ["gia" /* CommandName.GetItemsAt */, 'GetItemsAt'],
    ["llm" /* CommandName.GetLLMContextFromItems */, 'GetLLMContextFromItems'],
    ["goci" /* CommandName.GetOAuthClientId */, 'GetOAuthClientId'],
    ["got" /* CommandName.GetOAuthToken */, 'GetOAuthToken'],
    ["gps" /* CommandName.GetPackageSettings */, 'GetPackageSettings'],
    ["gpr" /* CommandName.GetProduct */, 'GetProduct'],
    ["gp" /* CommandName.GetProperty */, 'GetProperty'],
    ["grk" /* CommandName.GetReferenceKey */, 'GetReferenceKey'],
    ["grlp" /* CommandName.GetRelativeLinePosition */, 'GetRelativeLinePosition'],
    ["gs" /* CommandName.GetSelection */, 'GetSelection'],
    ["gsd" /* CommandName.GetShapeData */, 'GetShapeData'],
    ["gsvg" /* CommandName.GetSvg */, 'GetSvg'],
    ["gts" /* CommandName.GetTextStyle */, 'GetTextStyle'],
    ["guid" /* CommandName.GetUserId */, 'GetUserId'],
    ["gvr" /* CommandName.GetVisibleRect */, 'GetVisibleRect'],
    ["hm" /* CommandName.HideModal */, 'HideModal'],
    ["hp" /* CommandName.HidePanel */, 'HidePanel'],
    ["hac" /* CommandName.HookAllChanges */, 'HookAllChanges'],
    ["hci" /* CommandName.HookCreateItems */, 'HookCreateItems'],
    ["hdi" /* CommandName.HookDeleteItems */, 'HookDeleteItems'],
    ["hs" /* CommandName.HookSelection */, 'HookSelection'],
    ["hte" /* CommandName.HookTextEdit */, 'HookTextEdit'],
    ["ic" /* CommandName.ImportCards */, 'ImportCards'],
    ["il" /* CommandName.ImportLinks */, 'ImportLinks'],
    ["imp" /* CommandName.ImportPage */, 'ImportPage'],
    ["k" /* CommandName.KillExtension */, 'KillExtension'],
    ["lb" /* CommandName.ListBlocks */, 'ListBlocks'],
    ["lcf" /* CommandName.ListCollectionFields */, 'ListCollectionFields'],
    ["lc" /* CommandName.ListCollections */, 'ListCollections'],
    ["ldi" /* CommandName.ListDataItems */, 'ListDataItems'],
    ["lds" /* CommandName.ListDataSources */, 'ListDataSources'],
    ["lde" /* CommandName.ListDocumentElements */, 'ListDocumentElements'],
    ["lg" /* CommandName.ListGroups */, 'ListGroups'],
    ["ll" /* CommandName.ListLines */, 'ListLines'],
    ["lp" /* CommandName.ListPages */, 'ListPages'],
    ["lpr" /* CommandName.ListProperties */, 'ListProperties'],
    ["lrk" /* CommandName.ListReferenceKeys */, 'ListReferenceKeys'],
    ["lsd" /* CommandName.ListShapeData */, 'ListShapeData'],
    ["lta" /* CommandName.ListTextAreas */, 'ListTextAreas'],
    ["lbc" /* CommandName.LoadBlockClasses */, 'LoadBlockClasses'],
    ["log" /* CommandName.LogForTestCase */, 'LogForTestCase'],
    ["mt" /* CommandName.MeasureText */, 'MeasureText'],
    ["oi" /* CommandName.OffsetItems */, 'OffsetItems'],
    ["pdi" /* CommandName.PatchDataItems */, 'PatchDataItems'],
    ["p" /* CommandName.Prompt */, 'Prompt'],
    ["rp" /* CommandName.RegisterPanel */, 'RegisterPanel'],
    ["ru" /* CommandName.RegisterUnfurl */, 'RegisterUnfurl'],
    ["r" /* CommandName.ReloadExtension */, 'ReloadExtension'],
    ["aoauth" /* CommandName.SendAsyncOAuthRequest */, 'SendAsyncOAuthRequest'],
    ["oauth" /* CommandName.SendOAuthRequest */, 'SendOAuthRequest'],
    ["suim" /* CommandName.SendUIMessage */, 'SendUIMessage'],
    ["xhr" /* CommandName.SendXHR */, 'SendXHR'],
    ["scp" /* CommandName.SetCurrentPage */, 'SetCurrentPage'],
    ["sps" /* CommandName.SetPackageSettings */, 'SetPackageSettings'],
    ["sp" /* CommandName.SetProperty */, 'SetProperty'],
    ["srk" /* CommandName.SetReferenceKey */, 'SetReferenceKey'],
    ["ss" /* CommandName.SetSelection */, 'SetSelection'],
    ["ssd" /* CommandName.SetShapeData */, 'SetShapeData'],
    ["sts" /* CommandName.SetTextStyle */, 'SetTextStyle'],
    ["sm" /* CommandName.ShowModal */, 'ShowModal'],
    ["spsm" /* CommandName.ShowPackageSettingsModal */, 'ShowPackageSettingsModal'],
    ["spn" /* CommandName.ShowPanel */, 'ShowPanel'],
    ["sleep" /* CommandName.SleepForTestCase */, 'SleepForTestCase'],
    ["sdc" /* CommandName.StartDragBlockToCanvas */, 'StartDragBlockToCanvas'],
    ["pdf" /* CommandName.StartPDFUploadRequest */, 'StartPDFUploadRequest'],
    ["throw" /* CommandName.ThrowForTestCase */, 'ThrowForTestCase'],
    ["tauth" /* CommandName.TriggerAuthFlow */, 'TriggerAuthFlow'],
    ["uac" /* CommandName.UnhookAllChanges */, 'UnhookAllChanges'],
    ["uci" /* CommandName.UnhookCreateItems */, 'UnhookCreateItems'],
    ["udi" /* CommandName.UnhookDeleteItems */, 'UnhookDeleteItems'],
    ["us" /* CommandName.UnhookSelection */, 'UnhookSelection'],
    ["ute" /* CommandName.UnhookTextEdit */, 'UnhookTextEdit'],
    ["wm" /* CommandName.WithMutex */, 'WithMutex'],
    ["wsa" /* CommandName.WithSilentActions */, 'WithSilentActions'],
    ["z" /* CommandName.ZOrder */, 'ZOrder'],
]);
var AuthorizationFlowHandlerStage;
(function (AuthorizationFlowHandlerStage) {
    AuthorizationFlowHandlerStage["OnFailure"] = "onFailure";
})(AuthorizationFlowHandlerStage || (exports.AuthorizationFlowHandlerStage = AuthorizationFlowHandlerStage = {}));
var HashAlgorithmEnum;
(function (HashAlgorithmEnum) {
    /** Use the SHA 256 hashing algorithm */
    HashAlgorithmEnum["sha256"] = "SHA256";
})(HashAlgorithmEnum || (exports.HashAlgorithmEnum = HashAlgorithmEnum = {}));
var GetDocumentChunksType;
(function (GetDocumentChunksType) {
    /**
     * Breaks up a document into chunks geographically
     */
    GetDocumentChunksType[GetDocumentChunksType["Geographic"] = 0] = "Geographic";
    /**
     * Breaks up a document into chunks by finding containing blocks
     */
    GetDocumentChunksType[GetDocumentChunksType["Container"] = 1] = "Container";
})(GetDocumentChunksType || (exports.GetDocumentChunksType = GetDocumentChunksType = {}));
var GetItemsAtSearchType;
(function (GetItemsAtSearchType) {
    GetItemsAtSearchType[GetItemsAtSearchType["PossiblyOverlapping"] = 0] = "PossiblyOverlapping";
    GetItemsAtSearchType[GetItemsAtSearchType["Overlapping"] = 1] = "Overlapping";
    GetItemsAtSearchType[GetItemsAtSearchType["Contained"] = 2] = "Contained";
})(GetItemsAtSearchType || (exports.GetItemsAtSearchType = GetItemsAtSearchType = {}));
var GetLLMContextType;
(function (GetLLMContextType) {
    /** Get context in a format for LLMs where relationships among connected and
     * contained items are preserved. Expand the scope of the selection to
     * include blocks contained by the selection as well as lines connecting
     * items in the selection. */
    GetLLMContextType[GetLLMContextType["Relational"] = 1] = "Relational";
    /** Get context containing only plain text displayed on the given items, more suitable for embeddings */
    GetLLMContextType[GetLLMContextType["PlainText"] = 2] = "PlainText";
    /** Get context in a format for LLMs where relationships among connected and
     * contained items are preserved. Do not expand the scope of the selection,
     * other than to ensure relationships are represented. Text on selected
     * items will be included, but text on automatically added items will not.
     * */
    GetLLMContextType[GetLLMContextType["RelationalWithoutExpansion"] = 3] = "RelationalWithoutExpansion";
})(GetLLMContextType || (exports.GetLLMContextType = GetLLMContextType = {}));
var MermaidDiagramType;
(function (MermaidDiagramType) {
    MermaidDiagramType["FLOWCHART"] = "flowchart";
    MermaidDiagramType["CLASS_DIAGRAM"] = "class_diagram";
    MermaidDiagramType["ERD"] = "erd";
    // The following types are not yet supported.
    // SEQUENCE_DIAGRAM = 'sequence_diagram',
    // STATE_DIAGRAM = 'state_diagram',
    // USER_JOURNEY = 'user_journey',
    // GANTT = 'gantt',
    // PIECHART = 'piechart',
    // MINDMAP = 'mindmap',
    // REQUIREMENT_DIAGRAM = 'requirement_diagram',
    // GITGRAPH = 'gitgraph',
    // TIMELINE = 'timeline',
})(MermaidDiagramType || (exports.MermaidDiagramType = MermaidDiagramType = {}));
function isRawSendXHRResponse(val) {
    return (0, checks_1.isString)(val['url']) && (0, checks_1.isString)(val['t']) && (0, checks_1.isNumber)(val['s']) && (0, checks_1.isObject)(val['h']);
}
exports.isRawSendXHRResponse = isRawSendXHRResponse;
var ZOrderOperation;
(function (ZOrderOperation) {
    ZOrderOperation[ZOrderOperation["UP"] = 1] = "UP";
    ZOrderOperation[ZOrderOperation["TOP"] = 2] = "TOP";
    ZOrderOperation[ZOrderOperation["DOWN"] = 3] = "DOWN";
    ZOrderOperation[ZOrderOperation["BOTTOM"] = 4] = "BOTTOM";
})(ZOrderOperation || (exports.ZOrderOperation = ZOrderOperation = {}));
