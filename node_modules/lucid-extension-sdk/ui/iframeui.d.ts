import { JsonSerializable } from '../core/jsonserializable';
import { EditorClient } from '../editorclient';
/** @ignore */
export declare enum IncomingUIMessageType {
    Closed = 1,
    PostMessageFromFrame = 2,
    FrameLoaded = 3,
    FramePosition = 4
}
/** @ignore */
export interface IncomingUIMessage {
    'id': string;
    't': IncomingUIMessageType;
    'data'?: any;
}
/**
 * Base class for defining and interacting with custom UI elements whose contents are displayed
 * in an iframe.
 */
export declare abstract class IframeUI {
    protected readonly client: EditorClient;
    private static nextId;
    private id;
    private static uiMessageActionNamePrefix;
    protected messageActionName: string;
    /** True after the iframe has fired an onload event (not all scripts are necessarily finished executing) */
    protected loaded: boolean;
    private frameLoadedPromise;
    /**
     * The location of this frame within the top-level browser window. This is always updated immediately before
     * `messageFromFrame` is called.
     */
    protected framePosition: {
        x: number;
        y: number;
        w: number;
        h: number;
    };
    constructor(client: EditorClient);
    /** @ignore */
    static isUIMessageActionName(name: string): boolean;
    /**
     * Subclasses must call hookMessages some time before the UI is displayed. A Modal
     * will call this when the open() method is called, where a Panel will need to do
     * this in the constructor to watch for the user opening the panel.
     */
    protected hookMessages(): void;
    /**
     * Subclasses must call unhookMessages to allow them to be garbage collected.
     */
    protected unhookMessages(): void;
    /**
     * Send a message to this UI component's iframe via window.postMessage.
     * @param data Data to send to the iframe
     */
    sendMessage(data: JsonSerializable): Promise<void>;
    /**
     * Receives messages sent from the iframe via parent.postMessage(<data>, '*')
     * @param message data sent from the iframe
     */
    protected messageFromFrame(message: any): void;
    /**
     * Called when the iframe has been constructed, its srcdoc set, and the window loaded event has fired
     */
    protected frameLoaded(): void;
    /**
     * Called when the iframe has been removed from the DOM
     */
    protected frameClosed(): void;
}
