"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = exports.MenuLocation = exports.MenuType = void 0;
/**
 * Type of menu you're adding.
 * Consider using addDropdownMenuItem, addContextMenuItem, or addContentDockMenuItem for easier to use entrypoints and clearer requirements.
 */
var MenuType;
(function (MenuType) {
    /** The main drop down menus. */
    MenuType[MenuType["Main"] = 1] = "Main";
    /** The context menu that appears when the user right-clicks the canvas. */
    MenuType[MenuType["Context"] = 2] = "Context";
    /** The side dock in Lucidspark and Teamspaces */
    MenuType[MenuType["ContentDock"] = 3] = "ContentDock";
})(MenuType || (exports.MenuType = MenuType = {}));
/**
 * Semantic locations to place a new menu item.
 */
var MenuLocation;
(function (MenuLocation) {
    /** Default location: a new top-level menu entry for this extension, or the end of the context menu */
    MenuLocation[MenuLocation["Extension"] = 1] = "Extension";
    MenuLocation[MenuLocation["Edit"] = 2] = "Edit";
    MenuLocation[MenuLocation["View"] = 3] = "View";
    MenuLocation[MenuLocation["Share"] = 4] = "Share";
    MenuLocation[MenuLocation["Export"] = 5] = "Export";
    MenuLocation[MenuLocation["Import"] = 6] = "Import";
})(MenuLocation || (exports.MenuLocation = MenuLocation = {}));
class Menu {
    constructor(client) {
        this.client = client;
    }
    /**
     * Generic function to create a new menu item to trigger custom code.
     * You can use addDropdownMenuItem, addContextMenuItem, or addContentDockMenuItem for easier to use entrypoints.
     *
     * The action must be registered with
     * [EditorClient.registerAction](/extension-sdk/#classes_editorclient-EditorClient_registeraction)
     * prior to using it in the menu.
     *
     * @param item The definition of the new menu item
     */
    addMenuItem(item) {
        if (item.action && !this.client.actionExists(item.action)) {
            throw new Error('Unregistered action: ' + item.action);
        }
        if (item.visibleAction && !this.client.actionExists(item.visibleAction)) {
            throw new Error('Unregistered action: ' + item.visibleAction);
        }
        if (item.disabledAction && !this.client.actionExists(item.disabledAction)) {
            throw new Error('Unregistered action: ' + item.disabledAction);
        }
        if (item.menuType == MenuType.ContentDock && !item.iconUrl) {
            throw new Error('MenuType.ContentDock requires icon url');
        }
        if (item.menuType == MenuType.ContentDock && !item.action) {
            throw new Error('MenuType.ContentDock requires action');
        }
        this.client.sendCommand("ami" /* CommandName.AddMenuItem */, {
            'l': item.label,
            'i': item.iconUrl,
            'a': item.action,
            'v': item.visibleAction,
            'd': item.disabledAction,
            't': item.menuType,
            'loc': item.location,
            'f': item.file
                ? {
                    'a': item.file.action,
                    'ac': item.file.accept,
                    's': item.file.singleFileOnly,
                    'b': item.file.binary,
                }
                : undefined,
        });
    }
    /**
     * Create a menu in the basic drop down top menus. In Lucidspark this will just be under the generic menu.
     * In Lucidchart you can configure this to be in any of the other drop down menus.
     *
     * The action must be registered with
     * [EditorClient.registerAction](/extension-sdk/#classes_editorclient-EditorClient_registeraction)
     * prior to using it in the menu.
     *
     * @param item The definition of the new menu item
     */
    addDropdownMenuItem(item) {
        var _a;
        this.addMenuItem({
            label: item.label,
            action: item.action,
            visibleAction: item.visibleAction,
            disabledAction: item.disabledAction,
            menuType: MenuType.Main,
            location: (_a = item.location) !== null && _a !== void 0 ? _a : MenuLocation.Extension,
            file: item.file,
        });
    }
    /**
     * Create a menu in the right click context menu. Appears in both Lucidspark and Lucidchart.
     *
     * The action must be registered with
     * [EditorClient.registerAction](/extension-sdk/#classes_editorclient-EditorClient_registeraction)
     * prior to using it in the menu.
     *
     * @param item The definition of the new menu item
     */
    addContextMenuItem(item) {
        this.addMenuItem({
            label: item.label,
            action: item.action,
            visibleAction: item.visibleAction,
            disabledAction: item.disabledAction,
            menuType: MenuType.Context,
            location: MenuLocation.Extension,
            file: item.file,
        });
    }
    /**
     * Create an icon tied to an action (required) that appears in the left toolbar in Lucidspark and Teamspaces (not in Lucidchart).
     *
     * The action must be registered with
     * [EditorClient.registerAction](/extension-sdk/#classes_editorclient-EditorClient_registeraction)
     * prior to using it in the menu.
     *
     * @param item The definition of the new menu item
     */
    addContentDockMenuItem(item) {
        this.addMenuItem({
            label: item.label,
            iconUrl: item.iconUrl,
            action: item.action,
            visibleAction: item.visibleAction,
            disabledAction: item.disabledAction,
            menuType: MenuType.ContentDock,
            location: MenuLocation.Extension,
            file: item.file,
        });
    }
}
exports.Menu = Menu;
