import { EditorClient } from '../editorclient';
import { IframeUI } from './iframeui';
/**
 * Semantic locations to place a new menu item.
 */
export declare enum PanelLocation {
    /** In Lucidchart, create a sibling to the Contextual Panel */
    RightDock = 1,
    /** In Lucidchart, create a sibling to the shape toolbox */
    ContentDock = 2,
    /** In Lucidchart & Lucidspark, add to the image dock */
    ImageSearchTab = 3
}
export type PanelConfig = {
    /** Title to display at the top of the panel */
    title: string;
    /** Location to display the panel */
    location: PanelLocation;
    /** If specified, what action's return value should determine if the button to toggle this panel is visible? */
    visibleAction?: string;
    /** The URL for an icon to represent the panel, preferably base64-encoded. Will be displayed at 24x24 CSS pixels in size. */
    iconUrl: string;
    /** A tool tip to be displayed when hovering over the activation icon. */
    toolTip?: string;
    /** If set true, we will persist the panel's iframe in the background if it's not currently active*/
    persist?: boolean;
    /** Requested width of the panel, in pixels. Depending on window size & panel location, this may not be honored exactly. */
    width?: number;
    /** Requested height of the panel, in pixels. Depending on window size & panel location, this may not be honored exactly. */
    height?: number;
} & ({
    /** Content to display in the panel's iframe. This is set as the srcdoc on a sandboxed iframe. */
    content: string;
    /** URL to load in the iframe. Can be either an absolute URL or one relative to the /public directory in this package */
    url?: never;
} | {
    /** Content to display in the panel's iframe. This is set as the srcdoc on a sandboxed iframe. */
    content?: never;
    /** URL to load in the iframe. Can be either an absolute URL or one relative to the /public directory in this package */
    url: string;
});
/**
 * Extend this class to show a custom panel to the user, whose contents are displayed in a sandboxed
 * iframe controlled by your extension.
 *
 * To pass a message to a script running in the panel, call sendMessage. The data you pass in will be
 * sent to the iframe with window.postMessage.
 *
 * To pass messages back from the panel to this class, call parent.postMessage from within the iframe.
 * The data sent will be passed along to the messageFromFrame implementation on your Panel class.
 */
export declare abstract class Panel extends IframeUI {
    protected readonly config: PanelConfig;
    constructor(client: EditorClient, config: PanelConfig);
    /**
     * Show this panel if the panel is in the rightDock and it is not already visible.
     */
    show(): void;
    /**
     * Hide this panel if the panel is in the rightDock and it is currently visible.
     */
    hide(): void;
}
