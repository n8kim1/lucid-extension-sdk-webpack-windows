"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Panel = exports.PanelLocation = void 0;
const iframeui_1 = require("./iframeui");
/**
 * Semantic locations to place a new menu item.
 */
var PanelLocation;
(function (PanelLocation) {
    /** In Lucidchart, create a sibling to the Contextual Panel */
    PanelLocation[PanelLocation["RightDock"] = 1] = "RightDock";
    /** In Lucidchart, create a sibling to the shape toolbox */
    PanelLocation[PanelLocation["ContentDock"] = 2] = "ContentDock";
    /** In Lucidchart & Lucidspark, add to the image dock */
    PanelLocation[PanelLocation["ImageSearchTab"] = 3] = "ImageSearchTab";
})(PanelLocation || (exports.PanelLocation = PanelLocation = {}));
/**
 * Extend this class to show a custom panel to the user, whose contents are displayed in a sandboxed
 * iframe controlled by your extension.
 *
 * To pass a message to a script running in the panel, call sendMessage. The data you pass in will be
 * sent to the iframe with window.postMessage.
 *
 * To pass messages back from the panel to this class, call parent.postMessage from within the iframe.
 * The data sent will be passed along to the messageFromFrame implementation on your Panel class.
 */
class Panel extends iframeui_1.IframeUI {
    constructor(client, config) {
        super(client);
        this.config = config;
        this.hookMessages();
        this.client.sendCommand("rp" /* CommandName.RegisterPanel */, {
            'n': this.messageActionName,
            't': this.config.title,
            'l': this.config.location,
            'c': this.config.content,
            'u': this.config.url,
            'v': this.config.visibleAction,
            'i': this.config.iconUrl,
            'to': this.config.toolTip,
            'p': this.config.persist,
            'w': this.config.width,
            'h': this.config.height,
        });
    }
    /**
     * Show this panel if the panel is in the rightDock and it is not already visible.
     */
    show() {
        if (this.config.location == PanelLocation.RightDock) {
            this.client.sendCommand("spn" /* CommandName.ShowPanel */, { 'n': this.messageActionName });
        }
    }
    /**
     * Hide this panel if the panel is in the rightDock and it is currently visible.
     */
    hide() {
        if (this.config.location == PanelLocation.RightDock) {
            this.client.sendCommand("hp" /* CommandName.HidePanel */, { 'n': this.messageActionName });
        }
    }
}
exports.Panel = Panel;
