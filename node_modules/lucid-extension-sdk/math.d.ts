export type Point = {
    x: number;
    y: number;
};
export type Box = {
    x: number;
    y: number;
    w: number;
    h: number;
};
export declare function combinedBoundingBox(boxes: [Box, ...Box[]]): Box;
export declare function combinedBoundingBox(boxes: Box[]): Box | undefined;
export declare function padBox(box: Box, padding: number): Box;
/**
 * Is box a completely within box b?
 */
export declare function isBoxWithin(a: Box, b: Box): boolean;
/**
 * Do two boxes overlap?
 */
export declare function boxesOverlap(a: Box, b: Box): boolean;
/**
 * return the percentage of a that overlaps with b.
 * if a is entirely within b, it returns 1 (or a number a little less than 1
 * (e.g., 0.99999999999) due to numerical inaccuracy); if a is entirely
 * outside b, it returns 0.
 */
export declare function percentBoxesOverlap(a: Box, b: Box): number;
/**
 * Gets the intersection of two boxes
 * @return a clipped to b
 */
export declare function clip(a: Box, b: Box): Box;
export declare function boxCenter(b: Box): {
    x: number;
    y: number;
};
/**
 * Returns the bounding box that would surround the given
 * box when rotated the given amount.
 */
export declare function rotatedBoundingBox(b: Box, angle: number, center?: Point): Box;
export declare function rotateBox(b: Box, angle: number, center?: Point): [Point, Point, Point, Point];
export declare function boxFrom4Points(a: Point, b: Point, c: Point, d: Point): Box;
/**
 * @return An array containing the 4 points of the box in this exact order:
 * [top left, top right, bottom right, bottom left].
 */
export declare function toCornersAsArray(box: Box): [Point, Point, Point, Point];
export declare function rotateAroundFn(anchor: Point, angle: number): (p1: Point) => Point;
