import { SerializedFieldType } from '../core/data/serializedfield/serializedfields';
import { MapProxy } from '../document/mapproxy';
import { PropertyStoreProxy } from '../document/propertystoreproxy';
import { EditorClient } from '../editorclient';
import { DataItemProxy } from './dataitemproxy';
import { PatchCollectionProxy } from './patchcollectionproxy';
import { SchemaDefinition } from './schemadefinition';
/**
 * A collection is a set of data items, each with the same set of fields (though some data items may not have all
 * fields defined).
 */
export declare class CollectionProxy extends PropertyStoreProxy {
    readonly id: string;
    /**
     *
     * @param id ID of this collection on the current document
     * @param client
     */
    constructor(id: string, client: EditorClient);
    /**
     * @returns a human-readable name for this collection
     */
    getName(): string;
    getSyncCollectionId(): string | undefined;
    /**
     * Some data collections may have local branches on the document, to store the set of changes that have been
     * made by the user since the time the data was last refreshed from its source. For those collections, you
     * can use this method to get the original data collection as it was last imported or refreshed.
     *
     * @returns the original collection from which this collection was branched, or undefined if this collection
     * is not a branch
     */
    getBranchedFrom(): CollectionProxy | undefined;
    /**
     * Certain collections, such as metadata collections, may be hidden from the data panel with the `hideFromDataPanel`
     * argument of `CollectionPatch`. This method identifies whether this collection has been hidden from the data panel
     * via this mechanism.
     */
    isHiddenFromDataPanel(): boolean;
    /**
     * @returns information about any changes made locally to the collection that have not been synchronized
     * with the external data source.
     */
    getLocalChanges(): PatchCollectionProxy | undefined;
    /**
     * The data items in this collection, organized by their primary key. The primary key is usually calculated
     * from the content of the data item, but may differ from the expected value in some circumstances, e.g. if
     * there are two data items that would have the same primary key.
     */
    readonly items: MapProxy<string, DataItemProxy>;
    patchItems(patch: {
        added?: Record<string, SerializedFieldType>[];
        changed?: Map<string, Record<string, SerializedFieldType>>;
        deleted?: string[];
    }): import("../commandtypes").PatchDataItemsResult;
    /**
     * @returns an array of field names that are accessible on the items in this collection
     */
    getFields(): string[];
    getSchema(): SchemaDefinition;
}
