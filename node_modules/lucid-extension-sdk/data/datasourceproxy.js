"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSourceProxy = void 0;
const checks_1 = require("../core/checks");
const fieldtypedefinition_1 = require("../core/data/fieldtypedefinition/fieldtypedefinition");
const mapproxy_1 = require("../document/mapproxy");
const propertystoreproxy_1 = require("../document/propertystoreproxy");
const collectionproxy_1 = require("./collectionproxy");
/**
 * A data source represents a set of related data collections on a document. Typically one data source
 * is produced for each data import.
 */
class DataSourceProxy extends propertystoreproxy_1.PropertyStoreProxy {
    /**
     * @param id ID of the dataSource on the current document
     * @param client
     */
    constructor(id, client) {
        super(id, client);
        this.id = id;
        /**
         * The set of data collections in this data source, organized by ID on this document. The IDs will
         * remain stable for as long as the collection exists on this document, but will vary from
         * the collection ID on other documents if the same data is imported there.
         */
        this.collections = new mapproxy_1.MapProxy(() => this.client.sendCommand("lc" /* CommandName.ListCollections */, { 'id': this.id }), (id) => new collectionproxy_1.CollectionProxy(id, this.client));
    }
    /**
     * Create a new collection as part of this data source.
     * @param name
     * @param schema
     * @returns The newly created collection
     */
    addCollection(name, schema) {
        return new collectionproxy_1.CollectionProxy(this.client.sendCommand("cc" /* CommandName.CreateCollection */, {
            's': this.id,
            'n': name,
            'f': schema.fields.map((field) => {
                return { 'n': field.name, 't': (0, fieldtypedefinition_1.serializeFieldTypeDefinition)(field.type) };
            }),
            'p': schema.primaryKey,
            'fl': schema.fieldLabels,
        }), this.client);
    }
    /**
     * @returns A human-readable name for this data source
     */
    getName() {
        return this.properties.get('Name');
    }
    /**
     * @returns The source configuration values set when this data source was created
     */
    getSourceConfig() {
        const upstream = this.properties.get('Upstream');
        if ((0, checks_1.isObjectUnsafe)(upstream)) {
            return upstream['SourceConfig'];
        }
        return {};
    }
}
exports.DataSourceProxy = DataSourceProxy;
