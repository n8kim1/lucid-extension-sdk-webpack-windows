import { UpdateCreationPermission } from '../../core/data/datasource/updatecreationpermission';
import { SchemaDefinition } from '../../data/schemadefinition';
import { ItemsPatch, SerializedItemsPatch, SerializedSchemaForApi } from '../datasourceupdatetypes';
export type PatchChangeCollection = {
    collectionId: string;
    itemsPatch: ItemsPatch;
    schema?: SchemaDefinition;
};
/**
 * Reports a completed change back to Lucid
 */
export declare class PatchChange {
    patchId: string;
    syncId: string;
    collections: PatchChangeCollection[];
    creationPermission?: "DataSource" | "Collection" | "Item" | "None" | undefined;
    private errors;
    constructor(patchId: string, syncId: string, collections: PatchChangeCollection[], creationPermission?: "DataSource" | "Collection" | "Item" | "None" | undefined);
    setError(primaryKey: string, fieldName: string, error: string): void;
    setTooltipError(primaryKey: string, error: string): void;
    getErrors(): Record<string, Record<string, string>>;
}
/** Placeholder field name for tool tip errors */
export declare const PatchErrorTooltipField = "__canvasTooltipDataSyncError__";
type SerializedPatchErrors = Record<string, Record<string, Record<string, string>>>;
/** Convert a Patch change to our wire format */
export declare function serializePatchResponse(patchChange: PatchChange): SerializedPatchChange;
/** Wire format for changes parts of a patch response */
export type SerializedPatchChange = {
    'syncId': string;
    'collections': {
        'collectionId': string;
        'itemsPatch': SerializedItemsPatch;
        'schema'?: SerializedSchemaForApi;
    }[];
    'creationPermission'?: UpdateCreationPermission | undefined;
};
/** Wire format for "Patch" Action responses */
export type SerializedPatchResponseBody = {
    'changes': SerializedPatchChange[];
    'errors': SerializedPatchErrors;
};
export declare function serializePatchChanges(changes: PatchChange[][]): SerializedPatchResponseBody;
export {};
