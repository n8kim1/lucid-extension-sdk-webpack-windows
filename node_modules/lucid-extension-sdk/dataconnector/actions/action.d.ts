import { DataUpdateFilterType } from '../../data/dataupdatefiltertype';
import { DataSourceClient } from '../datasourceclient';
import { ItemPatch, Patch } from './patch';
export type CollectionId = string;
export type ItemPrimaryKey = string;
/**
 * This holds all the contextual information about a give data action.
 */
export declare class DataConnectorActionContext {
    /** The package ID of the extension that triggered this action */
    readonly packageId: string;
    /** The version of the extension that triggered this action */
    packageVersion: string;
    /** The authorized OAuth2 credential that Lucid has for the 3rd party this extension works with */
    userCredential: string;
    /** @ignore Boolean indicating whether to use a proxy server when making a request to third party */
    useOutboundProxy: boolean | undefined;
    /** The data connector name from manifest.json that triggered this action */
    dataConnectorName: string;
    /** The installation id of the extension/user that triggered this action */
    installationId: string | undefined;
    /** Set of items this document is tracking as a `Record<CollectionId, ItemPrimaryKey[]>` */
    documentCollections: {
        [collectionId: CollectionId]: ItemPrimaryKey[];
    };
    /** Update filter type for this document */
    updateFilterType: DataUpdateFilterType;
    constructor(
    /** The package ID of the extension that triggered this action */
    packageId: string, 
    /** The version of the extension that triggered this action */
    packageVersion: string, 
    /** The authorized OAuth2 credential that Lucid has for the 3rd party this extension works with */
    userCredential: string, 
    /** @ignore Boolean indicating whether to use a proxy server when making a request to third party */
    useOutboundProxy: boolean | undefined, 
    /** The data connector name from manifest.json that triggered this action */
    dataConnectorName: string, 
    /** The installation id of the extension/user that triggered this action */
    installationId: string | undefined, 
    /** Set of items this document is tracking as a `Record<CollectionId, ItemPrimaryKey[]>` */
    documentCollections: {
        [collectionId: CollectionId]: ItemPrimaryKey[];
    }, 
    /** Update filter type for this document */
    updateFilterType: DataUpdateFilterType);
}
/** Base class for actions to be performed by data connectors */
export declare class DataConnectorAction {
    name: string;
    context: DataConnectorActionContext;
    constructor(name: string, context: DataConnectorActionContext);
}
/**
 * A generic "asynchronous" action to be performed by the data connector. This is an action that reports back to Lucid
 * by calling back in the DataSourceClient rather than returning a meaningful value.
 **/
export declare class DataConnectorAsynchronousAction extends DataConnectorAction {
    client: DataSourceClient;
    data: unknown;
    constructor(name: string, context: DataConnectorActionContext, client: DataSourceClient, data: unknown);
}
/**
 * A generic "synchronous" action to be performed by the data connector.
 **/
export declare class DataConnectorSynchronousAction extends DataConnectorAction {
    data: unknown;
    constructor(name: string, context: DataConnectorActionContext, data: unknown);
}
export type PatchItems = {
    [primaryKey: ItemPrimaryKey]: {
        [fieldName: string]: unknown;
    };
};
/**
 * A patch action is a kind of synchronous style action. It occurs when data is changed in the Lucid editor. All the
 * changes are collected in the patches field.
 **/
export declare class DataConnectorPatchAction<P extends Patch = ItemPatch> extends DataConnectorAction {
    /** changes applied by Lucid */ patches: P[];
    client: DataSourceClient;
    constructor(context: DataConnectorActionContext, 
    /** changes applied by Lucid */ patches: P[], client: DataSourceClient, name?: string);
}
/**
 * A description of an existing webhook that Lucid is keeping track of.
 **/
export declare class Webhook {
    /** Set of items this webhook is tracking as a `Record<CollectionId, ItemPrimaryKey[]>` */
    documentCollections: {
        [collectionId: CollectionId]: ItemPrimaryKey[];
    };
    /** Arbitrary extra data to allow the data connector to better identitify the webhook. */
    webhookData: unknown;
    constructor(
    /** Set of items this webhook is tracking as a `Record<CollectionId, ItemPrimaryKey[]>` */
    documentCollections: {
        [collectionId: CollectionId]: ItemPrimaryKey[];
    }, 
    /** Arbitrary extra data to allow the data connector to better identitify the webhook. */
    webhookData: unknown);
}
/**
 * A "synchronous" style action indicating that Lucid would like to setup a webhook in the third party.
 */
export declare class DataConnectorManageWebhookAction extends DataConnectorAction {
    /**
     * Token to be added to the newly created webhook so that when it fires it will have permissions to make changes
     * to Lucid documents.
     */
    webhookToken: string;
    /**
     * A list of existing webhooks so you can be more granular about what you track. You may also find it useful to
     * delete some of the existing webhooks. The response back to Lucid should include all existing webhooks (newly
     * created or any of these that were not deleted).
     **/
    webhooks: Webhook[];
    constructor(context: DataConnectorActionContext, 
    /**
     * Token to be added to the newly created webhook so that when it fires it will have permissions to make changes
     * to Lucid documents.
     */
    webhookToken: string, 
    /**
     * A list of existing webhooks so you can be more granular about what you track. You may also find it useful to
     * delete some of the existing webhooks. The response back to Lucid should include all existing webhooks (newly
     * created or any of these that were not deleted).
     **/
    webhooks: Webhook[]);
}
