import { UpdateCreationPermission } from '../../core/data/datasource/updatecreationpermission';
import { FieldTypeDefinition } from '../../core/data/fieldtypedefinition/fieldtypedefinition';
import { CollectionId, PatchItems } from './action';
import { PatchChange, PatchChangeCollection } from './patchresponsebody';
import { SerializedThirdPartyColumn, SerializedThirdPartyColumnPatch } from './serializedpatchtypes';
export type PatchParser<P extends Patch> = (id: string, x: unknown) => P | undefined;
/** A patch to be applied against the 3rd party datasource with changes coming from Lucid */
export declare abstract class Patch {
    /** The id of the patch */
    id: string;
    /** The syncSourceId of the changed data source */
    syncSourceId: string;
    /** The syncCollectionId of the changed collection */
    syncCollectionId: CollectionId;
    constructor(
    /** The id of the patch */
    id: string, 
    /** The syncSourceId of the changed data source */
    syncSourceId: string, 
    /** The syncCollectionId of the changed collection */
    syncCollectionId: CollectionId);
    getChange(collections?: PatchChangeCollection[], creationPermission?: UpdateCreationPermission | undefined): PatchChange;
    abstract toJSON(): object;
    abstract clone(): this;
}
export declare const genericPatchParser: PatchParser<Patch>;
export declare class ItemPatch extends Patch {
    /** Mapping of item primary keys to new items introduced by Lucid */
    itemsAdded: PatchItems;
    /** Mapping of item primary keys to sparse changesets of pre-existing items changed by Lucid */
    itemsChanged: PatchItems;
    /** List of item primary keys deleted by Lucid */
    itemsDeleted: string[];
    /** */
    itemOrderChanged: [string, string | null][] | undefined;
    constructor(
    /** The id of the patch */
    id: string, 
    /** Mapping of item primary keys to new items introduced by Lucid */
    itemsAdded: PatchItems, 
    /** Mapping of item primary keys to sparse changesets of pre-existing items changed by Lucid */
    itemsChanged: PatchItems, 
    /** List of item primary keys deleted by Lucid */
    itemsDeleted: string[], 
    /** */
    itemOrderChanged: [string, string | null][] | undefined, 
    /** The syncSourceId of the changed data source */
    syncSourceId: string, 
    /** The syncCollectionId of the changed collection */
    syncCollectionId: CollectionId);
    toJSON(): object;
    clone(): this;
}
export declare const itemPatchParser: PatchParser<ItemPatch>;
export declare class ThirdPartyColumn {
    readonly name: string;
    readonly fieldType: FieldTypeDefinition;
    constructor(name: string, fieldType: FieldTypeDefinition);
    clone(): ThirdPartyColumn;
    toJSON(): object;
    static deserialize(data: SerializedThirdPartyColumn): ThirdPartyColumn;
}
export declare function areThirdPartyColumnsEqual(a: ThirdPartyColumn, b: ThirdPartyColumn): boolean;
export declare class ThirdPartyColumnPatch {
    readonly name?: string | undefined;
    readonly fieldType?: FieldTypeDefinition | undefined;
    constructor(name?: string | undefined, fieldType?: FieldTypeDefinition | undefined);
    clone(): ThirdPartyColumnPatch;
    toJSON(): object;
    static deserialize(data: SerializedThirdPartyColumnPatch): ThirdPartyColumnPatch;
}
export declare function areThirdPartyColumnPatchesEqual(a: ThirdPartyColumnPatch, b: ThirdPartyColumnPatch): boolean;
export declare class SchemaPatch extends Patch {
    /** Mapping of item primary keys to new items introduced by Lucid */
    columnsAdded: ThirdPartyColumn[];
    /** Mapping of item primary keys to sparse changesets of pre-existing items changed by Lucid */
    columnsChanged: Record<string, ThirdPartyColumnPatch>;
    /** List of item primary keys deleted by Lucid */
    columnsDeleted: string[];
    /** */
    columnOrdering: [string, string | null][] | undefined;
    constructor(
    /** The id of the patch */
    id: string, 
    /** Mapping of item primary keys to new items introduced by Lucid */
    columnsAdded: ThirdPartyColumn[], 
    /** Mapping of item primary keys to sparse changesets of pre-existing items changed by Lucid */
    columnsChanged: Record<string, ThirdPartyColumnPatch>, 
    /** List of item primary keys deleted by Lucid */
    columnsDeleted: string[], 
    /** */
    columnOrdering: [string, string | null][] | undefined, 
    /** The syncSourceId of the changed data source */
    syncSourceId: string, 
    /** The syncCollectionId of the changed collection */
    syncCollectionId: CollectionId);
    toJSON(): object;
    clone(): this;
}
export declare const schemaPatchParser: PatchParser<SchemaPatch>;
