"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockSignatureValidator = exports.SignatureValidator = void 0;
/**
 * Allows validation that requests originated from Lucid. This class can only be instanciated in a NodeJS environment.
 * Technically any environment that provides NodeJS compatible implementations of `globalThis.Buffer` and
 * `globalThis.require('crypto')` will work.
 */
class SignatureValidator {
    constructor(dependencies, publicKey) {
        this.dependencies = dependencies;
        this.publicKey = dependencies.crypto.createPublicKey(publicKey);
    }
    /**
     * Validate a given request came from Lucid.
     * @param body The body of the request as a plain JavaScript object. This should be JSON.parse called on exactly the
     *             request body that came from Lucid.
     * @param headers The headers that are associated with the request. Only 'x-lucid-rsa-nonce' and 'x-lucid-signature'
     *                are required.
     * @param url     The url of the current endpoint that is being requested.
     * @returns true if the request is valid
     */
    validate(body, headers, url) {
        const [, params = ''] = url.split('?');
        const nonce = headers['x-lucid-rsa-nonce'];
        const signature = this.dependencies.Buffer.from(headers['x-lucid-signature'], 'base64');
        const stringBody = typeof body === 'string' ? body : JSON.stringify(body);
        const data = this.dependencies.Buffer.from(stringBody + nonce + params);
        const verified = this.dependencies.crypto.verify('SHA384', data, this.publicKey, signature);
        return verified;
    }
}
exports.SignatureValidator = SignatureValidator;
/** Mock signature validator, always returns true. */
class MockSignatureValidator {
    validate() {
        return true;
    }
}
exports.MockSignatureValidator = MockSignatureValidator;
