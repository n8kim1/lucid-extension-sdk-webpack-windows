"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runDebugServer = exports.routeDebugServer = void 0;
const object_1 = require("../core/object");
/** @ignore */
function routeDebugServer(dataConnector, options) {
    var _a, _b;
    const { express } = options;
    const app = (_a = options.app) !== null && _a !== void 0 ? _a : options.express();
    // We can't use Express's JSON parsing because we need to send the string of the request body
    // directly for the route style flows. Some extensions compute a HMAC of from this data
    app.use(express.raw({ type: () => true, limit: '100mb' }));
    // CORS
    app.use((req, res, next) => {
        var _a, _b, _c, _d;
        if (((_b = (_a = req.headers) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.match(/.lucid(dev|staging|preprod|gov|govpreprod|).app$/)) ||
            ((_d = (_c = req.headers) === null || _c === void 0 ? void 0 : _c.origin) === null || _d === void 0 ? void 0 : _d.match(/.luciddev.cloud$/))) {
            res.header('Access-Control-Allow-Origin', req.headers.origin);
            res.header('Vary', 'Origin');
            res.header('Access-Control-Allow-Methods', 'GET, OPTIONS');
            res.header('Access-Control-Allow-Headers', '*');
        }
        next();
    });
    const prefix = (_b = options.prefix) !== null && _b !== void 0 ? _b : '/';
    console.log(`Routing ${prefix} (${Object.keys(dataConnector.actions).join(', ')})`);
    if (dataConnector.routes) {
        for (const routeName of Object.keys(dataConnector.routes)) {
            console.log(`Routing ${prefix}?kind=route&name=${routeName}`);
        }
    }
    app.post(prefix, async (req, res) => {
        try {
            const routeKind = req.query['kind'];
            if (routeKind === 'action' || routeKind == undefined || routeKind === '') {
                const { body, status } = await dataConnector.runAction(req.url, req.headers, req.body.toString());
                res.status(status).json(body);
            }
            if (routeKind === 'route') {
                const routeName = req.query['name'];
                if (typeof routeName === 'string') {
                    const route = dataConnector.routes[routeName];
                    const reqHeaders = req.headers;
                    const { body, status, headers } = await route({
                        body: req.body.toString(),
                        headers: reqHeaders,
                        query: (0, object_1.fromEntries)(Object.entries(req.query).map(([key, value]) => [
                            key,
                            typeof value === 'string' ? value : undefined,
                        ])),
                    });
                    for (const [name, value] of Object.entries(headers !== null && headers !== void 0 ? headers : {})) {
                        if (typeof value === 'string') {
                            res.setHeader(name, value);
                        }
                    }
                    res.status(status);
                    res.send(body);
                }
            }
        }
        catch (e) {
            console.log(`Error serving Connector: ${prefix} Flow: ${req.query['name']}, Exception:`, e);
            res.status(500).end();
        }
    });
    return app;
}
exports.routeDebugServer = routeDebugServer;
/** @ignore */
function runDebugServer(dataConnector, options) {
    var _a;
    const port = (_a = options.port) !== null && _a !== void 0 ? _a : 3001;
    const server = routeDebugServer(dataConnector, options).listen(port, () => {
        const address = server.address();
        const port = typeof address === 'string' ? address : address === null || address === void 0 ? void 0 : address.port;
        console.log(`Listening on port ${port}`);
    });
}
exports.runDebugServer = runDebugServer;
