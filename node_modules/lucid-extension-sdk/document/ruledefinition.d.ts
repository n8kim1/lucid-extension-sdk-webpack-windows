import { BadgeEnumPosition } from '../core/properties/datagraphic/badgeposition';
import { DataGraphicIconSets } from '../core/properties/datagraphic/datagraphicindexes';
import { StrokeStyle } from '../core/properties/strokestyle';
import { ConditionCombination, ShapeDataConditions, ShapeTypeConditions, TextConditions } from '../core/rules/conditions';
import { ConditionType } from '../core/rules/conditiontype';
import { ConditionValueType, SerializedCondition } from '../core/rules/serializedcondition';
import { RuleFormattingType, SerializedEffect } from '../core/rules/serializedeffect';
export interface BaseConditionDefinition {
    /** What kind of condition is this? e.g. a formula evaluation, checking for non-empty text, etc. */
    type: ConditionType;
}
export interface FormulaConditionDefinition extends BaseConditionDefinition {
    type: ConditionType.Formula;
    /** The formula string */
    formula: string;
}
export interface ShapeDataConditionDefinition extends BaseConditionDefinition {
    type: ConditionType.ShapeData;
    condition: ShapeDataConditions;
    /**
     * The value against which the condition is tested. For example, a condition with
     *  type = ConditionType.ShapeData
     *  condition = ShapeDataConditions.GreaterThan
     *  field = 'TheField'
     *  value = 14
     *
     * will trigger when the shape data field "TheField" has a value that is greater than 14.
     */
    value?: ConditionValueType;
    /** The name of the shape data field to test */
    field: string | undefined;
    /** The name to display to the end user to identify the field name */
    fieldLabel?: string | undefined;
}
export interface TextConditionDefinition extends BaseConditionDefinition {
    type: ConditionType.Text;
    condition: TextConditions;
    /**
     * The value against which the condition is tested. For example, a condition with
     *  type = ConditionType.ShapeData
     *  condition = ShapeDataConditions.GreaterThan
     *  field = 'TheField'
     *  value = 14
     *
     * will trigger when the shape data field "TheField" has a value that is greater than 14.
     */
    value?: ConditionValueType;
}
export interface ShapeTypeConditionDefinition extends BaseConditionDefinition {
    type: ConditionType.ShapeType;
    condition: ShapeTypeConditions;
    classNames: string[];
}
export type ConditionDefinition = FormulaConditionDefinition | ShapeDataConditionDefinition | TextConditionDefinition | ShapeTypeConditionDefinition;
export interface BaseEffectDefinition {
    conditions: ConditionDefinition[];
    /** How multiple conditions are combined (AND vs OR) */
    combination: ConditionCombination;
    tooltip?: string | undefined;
}
export interface FormattingEffectDefinition extends BaseEffectDefinition {
    formatType: RuleFormattingType.FORMATTING;
    formatting: {
        /** If specified, the color to use for affected block fills */
        fillColor?: string;
        /** If specified, the color to use for affected block borders */
        borderColor?: string;
        /** If specified, the width to use for affected block borders */
        borderWidth?: number;
        /** If specified, the style to use for affected block borders */
        borderStyle?: StrokeStyle;
        /** If specified, the color to use for affected lines */
        lineColor?: string;
        /** If specified, the width to use for affected lines */
        lineWidth?: number;
        /** If specified, the style to use for affected lines */
        lineStyle?: StrokeStyle;
    };
}
export interface DataGraphicEffectDefinition extends BaseEffectDefinition {
    formatType: RuleFormattingType.DATA_GRAPHICS;
    dataGraphic: {
        set: Exclude<DataGraphicIconSets, DataGraphicIconSets.CUSTOM_ICONS>;
        index: number;
        position: BadgeEnumPosition;
        color?: string;
    };
}
export interface CustomIconEffectDefinition extends BaseEffectDefinition {
    formatType: RuleFormattingType.DATA_GRAPHICS;
    dataGraphic: {
        set: DataGraphicIconSets.CUSTOM_ICONS;
        position: BadgeEnumPosition;
        image: {
            url: string;
            width: number;
            height: number;
        };
    };
}
export type EffectDefinition = FormattingEffectDefinition | DataGraphicEffectDefinition | CustomIconEffectDefinition;
export interface RuleDefinition {
    /** User-readable name of this conditional formatting rule */
    name: string;
    /**
     * The possible visual effects of this conditional formatting rule,
     * in priority order. The first effect whose conditions are met is used.
     */
    effects: EffectDefinition[];
}
/** @ignore */
export declare function serializeConditionDefinition(condition: ConditionDefinition): SerializedCondition;
/** @ignore */
export declare function serializeEffectDefinition(effect: EffectDefinition, conditionOrder: number[]): SerializedEffect;
