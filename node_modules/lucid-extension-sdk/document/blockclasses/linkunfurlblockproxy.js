"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalLinkUnfurlBlockProxy = exports.LinkUnfurlBlockProxy = void 0;
const iframeutils_1 = require("../../core/iframe/iframeutils");
const unfurliframe_1 = require("../../core/unfurl/unfurliframe");
const blockproxy_1 = require("../blockproxy");
/**
 * This is the kind of block that appears when a link is pasted onto the canvas of a Lucid editor.
 */
class LinkUnfurlBlockProxy extends blockproxy_1.BlockProxy {
    /**
     * Returns the title on the block, which is the main text shown on the block.
     */
    getTitle() {
        return this.textAreas.get('t_LinkUnfurlTitle');
    }
    /**
     * Sets the title on the block, which is the main text shown on the block.
     */
    setTitle(title) {
        this.textAreas.set('t_LinkUnfurlTitle', title, { force: true });
    }
    /**
     * Returns the description on the block.
     */
    getDescription() {
        return this.textAreas.get('t_LinkUnfurlDescription');
    }
    /**
     * Sets the description on the block.
     */
    setDescription(description) {
        this.textAreas.set('t_LinkUnfurlDescription', description, { force: true });
    }
    /**
     * Returns the name of the service the link belongs to, such as "Lucid" or "Google", as displayed below the title on
     * the block.
     */
    getProviderName() {
        return this.textAreas.get('t_LinkUnfurlProviderName');
    }
    /**
     * Gets the URL the user will be redirected to when the user clicks the "Pop Out" action on the block.
     */
    getUrl() {
        return this.properties.get('LinkUnfurlUrl');
    }
    /**
     * Sets the URL the user will be redirected to when the user clicks the "Pop Out" action on the block.
     */
    setUrl(url) {
        this.properties.set('LinkUnfurlUrl', url);
    }
    /**
     * Sets the URL to be loaded in an iframe when the user clicks the "Expand" action on the block.
     */
    setIframe(unfurlIframe) {
        const iframeAttributes = (0, unfurliframe_1.generateIframeAttributes)(unfurlIframe);
        this.properties.set('LinkUnfurlIframeHtml', (0, iframeutils_1.generateIFrameHTML)(iframeAttributes));
        this.properties.set('LinkUnfurlIframeHeight', iframeAttributes.height);
        this.properties.set('LinkUnfurlIframeWidth', iframeAttributes.width);
    }
    /**
     * Clears the iframe set on the block. The "Expand" action will default to the block's thumbnail image.
     */
    clearIframe() {
        this.properties.set('LinkUnfurlIframeHtml', undefined);
        this.properties.set('LinkUnfurlIframeHeight', undefined);
        this.properties.set('LinkUnfurlIframeWidth', undefined);
    }
    /**
     * Returns true if there is an iframe URL already set for this unfurl block
     */
    hasIframe() {
        return !!this.properties.get('LinkUnfurlIframeHtml');
    }
    /**
     * Sets the main thumbnail on the block
     */
    setPreviewThumbnailUrl(thumbnailUrl) {
        this.properties.set('LinkUnfurlThumbnailUrl', thumbnailUrl);
    }
    /**
     * Gets the main thumbnail on the block
     */
    getPreviewThumbnailUrl() {
        return this.properties.get('LinkUnfurlThumbnailUrl');
    }
    /**
     * Sets additional thumbnails on the block
     */
    setThumbnailUrls(thumbnails) {
        this.properties.set('LinkUnfurlThumbnailUrls', thumbnails);
    }
    /**
     * Gets the url for the favicon on the block
     */
    getFaviconUrl() {
        return this.properties.get('LinkUnfurlFaviconUrl');
    }
    /**
     * Sets the favicon on the block
     */
    setFaviconUrl(faviconUrl) {
        this.properties.set('LinkUnfurlFaviconUrl', faviconUrl);
    }
    /**
     * @ignore
     * Initiates the PDF upload for this block. The result includes an uploadUrl which you can use to upload the PDF.
     * The PDF uploaded at that url will be assocaite with this block (and any copy of it) in the editor until it is refreshed.
     */
    async experimentalStartPDFUpload() {
        const result = await this.client.sendCommand("pdf" /* CommandName.StartPDFUploadRequest */, this.id);
        return result;
    }
}
exports.LinkUnfurlBlockProxy = LinkUnfurlBlockProxy;
LinkUnfurlBlockProxy.classNameRegex = /^LinkUnfurlBlock$/;
/**
 * @ignore
 * @deprecated Use LinkUnfurlBlockProxy instead.
 */
exports.ExperimentalLinkUnfurlBlockProxy = LinkUnfurlBlockProxy;
