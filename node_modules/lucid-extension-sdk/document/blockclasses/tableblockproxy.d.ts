import { SimpleFillStyle } from '../../core/properties/fillcolor';
import { Box } from '../../math';
import { BlockProxy } from '../blockproxy';
import { TextStyle } from '../text/textstyle';
export declare class TableCellProxy {
    readonly table: TableBlockProxy;
    readonly row: number;
    readonly column: number;
    constructor(table: TableBlockProxy, row: number, column: number);
    getText(): string;
    setText(text: string): undefined;
    getTextStyle(): TextStyle;
    setTextStyle(style: Partial<TextStyle>): void;
    setFill(fill: SimpleFillStyle): void;
    /**
     * Cells in a table can be merged together with adjacent cells into one larger cell. In this case, the upper-
     * left cell remains visible but is enlarged to cover additional cells, and the other cells are hidden.
     *
     * @returns the size of this cell, in how many cells horizontally and vertically have been merged into it.
     * For most cells, this will be {w:1, h:1}, but if it has been merged with the cell to the right of it, it
     * would be {w:2, h:1}.
     */
    getMergedCellSize(): {
        w: number;
        h: number;
    };
    /**
    /**
     * Cells in a table can be merged together with adjacent cells into one larger cell. In this case, the upper-
     * left cell remains visible but is enlarged to cover additional cells, and the other cells are hidden.
     *
     * @param size the desired size of this cell, in how many cells horizontally and vertically are merged into it.
     * This normally {w:1, h:1} for a normal cell, or {w:2, h:1} to merge a cell with the one to the right of it, etc.
     */
    setMergedCellSize(size: {
        w: number;
        h: number;
    }): void;
    /**
     * @returns the pixel width of the cell, including any cells it is merged with.
     */
    getWidth(): number;
    /**
     * @returns the pixel height of the cell, including any cells it is merged with.
     */
    getHeight(): number;
    getBoundingBox(): Box;
}
export declare class TableRowProxy {
    readonly table: TableBlockProxy;
    readonly row: number;
    constructor(table: TableBlockProxy, row: number);
    getCells(): TableCellProxy[];
    getHeight(): number;
}
export declare class TableColumnProxy {
    readonly table: TableBlockProxy;
    readonly col: number;
    constructor(table: TableBlockProxy, col: number);
    getCells(): TableCellProxy[];
    getWidth(): number;
}
export declare class TableBlockProxy extends BlockProxy {
    static classNameRegex: RegExp;
    /**
     *
     * @param referenceCell The cell to add the new column before or after.
     * @param before If true, the new column will be added before the reference cell, otherwise it will be added after.
     * @returns The TableColumnProxy for the newly added column.
     */
    addColumn(referenceCell: TableCellProxy, before?: boolean): TableColumnProxy;
    /**
     *
     * @param referenceCell The cell to add the new row before or after.
     * @param before If true, the new row will be added before the reference cell, otherwise it will be added after.
     * @returns The TableRowProxy for the newly added row.
     */
    addRow(referenceCell: TableCellProxy, before?: boolean): TableRowProxy;
    /**
     * @param column The index of the column to delete.
     */
    deleteColumn(column: number): void;
    /**
     * @param row The index of the row to delete.
     */
    deleteRow(row: number): void;
    /**
     * @param textAreaKey The text area key of a cell in the table
     * @returns The TableCellProxy represented by the text area key, or undefined if the text area key does not exist in the table.
     */
    getCellByTextAreaKey(textAreaKey: string): TableCellProxy | undefined;
    getRowCount(): number;
    getColumnCount(): number;
    getRows(): TableRowProxy[];
    getRowHeights(): number[];
    getColumnWidths(): number[];
    setColumnWidths(widths: number[]): void;
    setRowHeights(heights: number[]): void;
    getAutoResizeColumns(): boolean;
    getAutoResizeRows(): boolean;
    setAutoResizeColumns(auto: boolean): void;
    setAutoResizeRows(auto: boolean): void;
    /**
     * @param margin The inset margin to be used, it control the margin for each table cell.
     */
    setInsetMargin(margin: number): void;
}
