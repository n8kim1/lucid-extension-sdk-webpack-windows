"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegendBlockProxy = exports.ShapeLegendEntryProxy = exports.ColorLegendEntryProxy = exports.LegendEntryProxy = exports.LegendItemType = void 0;
const blockproxy_1 = require("../blockproxy");
var LegendItemType;
(function (LegendItemType) {
    LegendItemType["Color"] = "color";
    LegendItemType["Shape"] = "shape";
})(LegendItemType || (exports.LegendItemType = LegendItemType = {}));
class LegendEntryProxy {
    constructor(legend, index, type) {
        this.legend = legend;
        this.index = index;
        this.type = type;
    }
    getText() {
        return this.legend.textAreas.get('LegendText_' + this.index);
    }
    setText(text) {
        this.legend.textAreas.set('LegendText_' + this.index, text);
    }
}
exports.LegendEntryProxy = LegendEntryProxy;
class ColorLegendEntryProxy extends LegendEntryProxy {
    constructor(legend, index) {
        super(legend, index, LegendItemType.Color);
    }
    getColor() {
        return this.legend.properties.get('LegendItem_' + this.index)['Value'];
    }
}
exports.ColorLegendEntryProxy = ColorLegendEntryProxy;
class ShapeLegendEntryProxy extends LegendEntryProxy {
    constructor(legend, index) {
        super(legend, index, LegendItemType.Shape);
    }
}
exports.ShapeLegendEntryProxy = ShapeLegendEntryProxy;
class LegendBlockProxy extends blockproxy_1.BlockProxy {
    getHeader() {
        return this.textAreas.get('t_header');
    }
    getItems() {
        const itemOrder = this.properties.get('ItemOrder');
        return itemOrder.map((index) => {
            const settings = this.properties.get('LegendItem_' + index);
            switch (settings['Type']) {
                case LegendItemType.Color:
                    return new ColorLegendEntryProxy(this, index);
                case LegendItemType.Shape:
                    return new ShapeLegendEntryProxy(this, index);
                default:
                    return new LegendEntryProxy(this, index, settings['Type']);
            }
        });
    }
}
exports.LegendBlockProxy = LegendBlockProxy;
LegendBlockProxy.classNameRegex = /^LegendBlockV2$/;
