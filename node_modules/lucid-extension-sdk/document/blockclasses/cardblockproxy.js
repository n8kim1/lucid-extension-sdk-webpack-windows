"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardBlockProxy = void 0;
const cardfielddisplaysettings_1 = require("../../core/cardintegration/cardfielddisplaysettings");
const blockproxy_1 = require("../blockproxy");
/**
 * A generic lucid card block.
 * This shape has all of the base functionality as a BlockProxy, as well as additional card specific properties.
 */
class CardBlockProxy extends blockproxy_1.BlockProxy {
    getSettings() {
        return this.referenceKeys.get(this.referenceKeys.keys()[0]).definition;
    }
    getTitle() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.Title];
    }
    getDescription() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.Description];
    }
    getStatus() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.Status];
    }
    getAssignee() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.Assignee];
    }
    getStartTime() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.StartTime];
    }
    getEndTime() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.EndTime];
    }
    getEstimate() {
        return this.getSettings().data[cardfielddisplaysettings_1.LucidCardFields.Estimate];
    }
    /**
     * @param title The title that you want to set for this card.
     */
    setTitle(title) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.Title] = title;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
    /**
     * @param description The description that you want to set for this card.
     */
    setDescription(description) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.Description] = description;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
    /**
     * @param status The status that you want to set for this card.
     */
    setStatus(status) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.Status] = status;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
    /**
     * @param assignee The assignee that you want to set for this card.
     */
    setAssignee(assignee) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.Assignee] = assignee;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
    /**
     * @param startTime The start time that you want to set for this card.
     */
    setStartTime(startTime) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.StartTime] = startTime;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
    /**
     * @param endTime The end time that you want to set for this card.
     */
    setEndTime(endTime) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.EndTime] = endTime;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
    /**
     * @param estimate The estimate that you want to set for this card.
     */
    setEstimate(estimate) {
        const settings = this.getSettings();
        settings.data[cardfielddisplaysettings_1.LucidCardFields.Estimate] = estimate;
        this.setReferenceKey(this.referenceKeys.keys()[0], settings);
    }
}
exports.CardBlockProxy = CardBlockProxy;
CardBlockProxy.classNameRegex = /^LucidCardBlock$/;
