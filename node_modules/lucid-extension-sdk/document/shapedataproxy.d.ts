import { SerializedFieldType } from '../core/data/serializedfield/serializedfields';
import { SerializedDataError } from '../core/serializeddataerror';
import { DataError } from '../data/dataerror';
import { EditorClient } from '../editorclient';
import { WriteableMapProxy } from './mapproxy';
/**
 * The shape data fields on a single element of the current document
 */
export declare class ShapeDataProxy extends WriteableMapProxy<string, SerializedFieldType | SerializedDataError, void> {
    readonly id: string | undefined;
    protected readonly client: EditorClient;
    /**
     * @param id The ID of the element, or undefined for the document itself
     * @param client
     */
    constructor(id: string | undefined, client: EditorClient);
    /**
     * Add shape data to this element that is inherited by its descendants.
     *
     * If you add an inheritable shape data to a page, whose formula is "=@Cost * 4", then
     * each item on that page will have a new shape data entry (in `allShapeData`) by that
     * name with the value calculated in the context of that individual item.
     *
     * Inheritable shape data on a page affects all items on the page. Inheritable shape
     * data on a group affects all items inside that group.
     *
     * @param name Name of the new shape data
     * @param value Value (or formula, if starting with "=") of the new shape data
     */
    addInheritable(name: string, value: string): void;
    /**
     * Delete the specified shape data from this element
     * @param key
     */
    delete(key: string): void;
    /** @ignore */
    static parseData(raw: SerializedFieldType | SerializedDataError): SerializedFieldType | DataError;
    /**
     * @param key Name of the shape data to read
     * @returns The value if it is a string, or an empty string if it does not exist or is not a string.
     */
    getString(key: string): string;
}
