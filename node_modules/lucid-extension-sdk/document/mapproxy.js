"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteableMapProxy = exports.MapProxy = void 0;
/**
 * A data structure similar to a normal Map which accesses its data through API
 * commands to the Lucid app. This structure is iterable with `for...of`.
 */
class MapProxy {
    constructor(getKeys, getItem) {
        this.getKeys = getKeys;
        this.getItem = getItem;
    }
    /** @ignore */
    *[Symbol.iterator]() {
        for (const key of this.keys()) {
            const value = this.get(key);
            if (value !== undefined) {
                yield [key, value];
            }
        }
    }
    *values() {
        for (const key of this.keys()) {
            const value = this.get(key);
            if (value !== undefined) {
                yield value;
            }
        }
    }
    find(filter) {
        for (const [key, value] of this) {
            if (filter(value, key)) {
                return value;
            }
        }
        return undefined;
    }
    filter(filter) {
        const filtered = [];
        for (const [key, value] of this) {
            if (filter(value, key)) {
                filtered.push(value);
            }
        }
        return filtered;
    }
    map(callback) {
        const mapped = [];
        for (const [key, value] of this) {
            mapped.push(callback(value, key));
        }
        return mapped;
    }
    keys() {
        return this.getKeys();
    }
    get size() {
        return this.keys().length;
    }
    get(key) {
        return this.getItem(key);
    }
    first() {
        const keys = this.keys();
        if (keys.length == 0) {
            return undefined;
        }
        return this.get(keys[0]);
    }
}
exports.MapProxy = MapProxy;
class WriteableMapProxy extends MapProxy {
    constructor(getKeys, getItem, setter) {
        super(getKeys, getItem);
        this.setter = setter;
    }
    set(key, value, options = {}) {
        return this.setter(key, value, options);
    }
}
exports.WriteableMapProxy = WriteableMapProxy;
