import { BadgeEnumPosition } from '../core/properties/datagraphic/badgeposition';
import { SimpleStaticDataGraphicSettings } from '../core/properties/datagraphic/staticdatagraphicsettings';
import { SimpleFillStyle } from '../core/properties/fillcolor';
import { Shadow } from '../core/properties/shadow';
import { ItemProxy } from './itemproxy';
/**
 * A block is a single shape on the document. A BlockProxy provides an interface to
 * read and write the content of an existing block, and is typically accessed through
 * [PageProxy.blocks](#classes_document_pageproxy-PageProxy_blocks) or another
 * similar mechanism.
 */
export declare class BlockProxy extends ItemProxy {
    /**
     * @returns The class name of this block. This name is not necessarily human-readable,
     * and will remain consistent over time, e.g. "ProcessBlock"..
     */
    getClassName(): string;
    /**
     * @returns The amount this block is rotated around its own center, in radians.
     */
    getRotation(): number;
    /**
     * @returns An axis-aligned bounding box containing this full item after any rotation it might have
     */
    getRotatedBoundingBox(): import("../math").Box;
    /**
     * @param radians Angle the block should be rotated
     */
    setRotation(radians: number): void;
    /**
     * @returns The current drop shadow on this block, or undefined if no shadow is set
     */
    getShadow(): Shadow | undefined;
    /**
     * @param shadow The drop shadow to set on the block, or undefined to clear the drop shadow
     */
    setShadow(shadow: Shadow | undefined): void;
    /**
     * Set the fill style used (by most kinds of blocks) to fill in their main opaque areas.
     * This can be a string color (e.g. `'#ff00ff80'`) or an image fill.
     */
    setFillStyle(fillStyle: SimpleFillStyle): void;
    /**
     * @returns An array of lines that have one or both endpoints connected to this block.
     */
    getConnectedLines(): import("./lineproxy").LineProxy[];
    /**
     * @param settings Information about the static data graphic icon to set on this block.
     */
    setSimpleStaticDataGraphic(settings: SimpleStaticDataGraphicSettings | undefined): void;
    /**
     * @returns Settings for the simple static data graphic currently set on this block, or undefined
     * if no simple data graphic is currently set. Note that if a data graphic exists that is not an
     * icon, this will return undefined. This function will not consider data graphics set via
     * conditional formatting rules.
     */
    getSimpleStaticDataGraphic(): SimpleStaticDataGraphicSettings | undefined;
    /**
     * Lock this block's aspect ratio to its current value.
     * This can be reversed with unlockAspectRatio.
     */
    lockAspectRatio(): void;
    /**
     * Unlock the aspect ratio of this block, allowing it to be stretched vertically or horizontally independently.
     */
    unlockAspectRatio(): void;
    /**
     * @returns The line width used by most kinds of blocks to render their outline.
     */
    getLineWidth(): number;
    /**
     * @param width The line width to be used (by most kinds of blocks) to render this block's outline
     */
    setLineWidth(width: number): void;
    /**
     * Link a text area to a data field, so that editing the text area will also update the
     * associated data, and vice versa.
     *
     * To use this, first establish a reference key on this block with
     * [setReferenceKey](/extension-sdk/#classes_document_blockproxy-BlockProxy_setreferencekey).
     *
     * @param textAreaKey
     * @param referenceKey
     * @param field
     */
    linkText(textAreaKey: string, referenceKey: string | number, field: string): void;
    /**
     * @param position The postion where the data sync state icon should be displayed on the block. If this position is
     * set to undefined then the state icon position will fallback to the default position for the block.
     */
    setDataSyncStateIconPosition(position: BadgeEnumPosition | undefined): void;
}
