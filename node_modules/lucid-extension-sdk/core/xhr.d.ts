import { SendXHRResponseFormat } from '../commandtypes';
import { Validator } from './guards';
export interface XHRRequest {
    /** URL to request */
    url: string;
    /** HTTP method, e.g. "POST". If omitted, GET is used */
    method?: string;
    /** The data to send as the body of the request  */
    data?: string;
    /** Headers to send with the request. If specifying an array, multiple headers with the same name will be sent */
    headers?: {
        [key: string]: string | string[];
    };
    /** If specified, this request should time out after the given number of milliseconds */
    timeoutMs?: number;
    /**
     * The desired format for the returned response body. Defaults to 'utf8'.
     *
     * - If 'utf8', the response body will be returned as a string.
     * - If 'binary', the response body will be returned as a Uint8Array.
     */
    responseFormat?: SendXHRResponseFormat;
    /**
     * For utf8 responses, you can have the result streamed to you for endpoints that support it.
     */
    streamCallback?: (chunk: string) => void;
}
export interface OAuthXHRRequest extends XHRRequest {
    /**
     * When present, forwards the result of this request to the specified destination. Instead, this request returns
     * whether the request will be made and forwarded, and not the actual request.
     *
     * Note: There is an allow list which limits where the result can be posted. It is currently only to the result of
     * LinkUnfurlBlockProxy#experimentalStartPDFUpload
     */
    postResultTo?: string;
}
export interface BaseXHRResponse {
    /** URL of the final response, after any redirects */
    url: string;
    /** HTTP status, e.g. 200 or 404 */
    status: number;
    /** Headers sent by the server in the response */
    headers: {
        [key: string]: string;
    };
    /** True if this request failed due to a timeout */
    timeout?: boolean;
}
export interface TextXHRResponse extends BaseXHRResponse {
    responseFormat: 'utf8';
    /** Plain text of the response body */
    responseText: string;
}
export interface BinaryXHRResponse extends BaseXHRResponse {
    responseFormat: 'binary';
    /** Contents of the response body */
    responseData: Uint8Array;
}
export type XHRResponse = TextXHRResponse | BinaryXHRResponse;
export declare const isTextXHRResponse: Validator<TextXHRResponse>;
export declare const isBinaryXHRResponse: Validator<BinaryXHRResponse>;
export declare const isXHRResponse: Validator<XHRResponse>;
