"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLayerPos = exports.isVerticalPos = exports.isHorizontalPos = exports.isValidSerializedBadgeEnumPosition = exports.serializeBadgeEnumPositionAsKey = exports.serializeBadgeEnumPosition = exports.deserializeBadgeEnumPosition = exports.badgePositionsEqual = exports.defaultBadgePositionSerialized = exports.defaultBadgePosition = exports.BadgePositionsClockwise = exports.BadgeResponsiveness = exports.BadgeLayerPos = exports.VerticalBadgePos = exports.HorizontalBadgePos = void 0;
const checks_1 = require("../../checks");
var HorizontalBadgePos;
(function (HorizontalBadgePos) {
    HorizontalBadgePos[HorizontalBadgePos["LEFT"] = 0] = "LEFT";
    HorizontalBadgePos[HorizontalBadgePos["CENTER"] = 1] = "CENTER";
    HorizontalBadgePos[HorizontalBadgePos["RIGHT"] = 2] = "RIGHT";
})(HorizontalBadgePos || (exports.HorizontalBadgePos = HorizontalBadgePos = {}));
var VerticalBadgePos;
(function (VerticalBadgePos) {
    VerticalBadgePos[VerticalBadgePos["TOP"] = 0] = "TOP";
    VerticalBadgePos[VerticalBadgePos["CENTER"] = 1] = "CENTER";
    VerticalBadgePos[VerticalBadgePos["BOTTOM"] = 2] = "BOTTOM";
})(VerticalBadgePos || (exports.VerticalBadgePos = VerticalBadgePos = {}));
var BadgeLayerPos;
(function (BadgeLayerPos) {
    BadgeLayerPos[BadgeLayerPos["INSIDE"] = 0] = "INSIDE";
    BadgeLayerPos[BadgeLayerPos["EDGE"] = 1] = "EDGE";
    BadgeLayerPos[BadgeLayerPos["OUTSIDE"] = 2] = "OUTSIDE";
})(BadgeLayerPos || (exports.BadgeLayerPos = BadgeLayerPos = {}));
var BadgeResponsiveness;
(function (BadgeResponsiveness) {
    BadgeResponsiveness[BadgeResponsiveness["STATIC"] = 0] = "STATIC";
    BadgeResponsiveness[BadgeResponsiveness["STACK"] = 1] = "STACK";
})(BadgeResponsiveness || (exports.BadgeResponsiveness = BadgeResponsiveness = {}));
/*
 * The order of the badge position starting from the top-left corner and going clockwise
 */
exports.BadgePositionsClockwise = [
    { horizontalPos: 0, verticalPos: 0 },
    { horizontalPos: 1, verticalPos: 0 },
    { horizontalPos: 2, verticalPos: 0 },
    { horizontalPos: 2, verticalPos: 1 },
    { horizontalPos: 2, verticalPos: 2 },
    { horizontalPos: 1, verticalPos: 2 },
    { horizontalPos: 0, verticalPos: 2 },
    { horizontalPos: 0, verticalPos: 1 }, // left-center
];
exports.defaultBadgePosition = {
    horizontalPos: HorizontalBadgePos.RIGHT,
    verticalPos: VerticalBadgePos.TOP,
    layer: BadgeLayerPos.EDGE,
    responsive: BadgeResponsiveness.STACK,
};
exports.defaultBadgePositionSerialized = {
    'horiz': HorizontalBadgePos.RIGHT,
    'vert': VerticalBadgePos.TOP,
    'layer': BadgeLayerPos.EDGE,
    'responsive': BadgeResponsiveness.STACK,
};
function badgePositionsEqual(a, b) {
    return (a.horizontalPos === b.horizontalPos &&
        a.verticalPos === b.verticalPos &&
        a.layer === b.layer &&
        a.responsive === b.responsive);
}
exports.badgePositionsEqual = badgePositionsEqual;
function deserializeBadgeEnumPosition(serialized) {
    if (serialized == null) {
        return undefined;
    }
    return {
        horizontalPos: serialized['horiz'] != null ? serialized['horiz'] : exports.defaultBadgePosition.horizontalPos,
        verticalPos: serialized['vert'] != null ? serialized['vert'] : exports.defaultBadgePosition.verticalPos,
        layer: serialized['layer'] != null ? serialized['layer'] : exports.defaultBadgePosition.layer,
        responsive: serialized['responsive'] != null ? serialized['responsive'] : exports.defaultBadgePosition.responsive,
    };
}
exports.deserializeBadgeEnumPosition = deserializeBadgeEnumPosition;
function serializeBadgeEnumPosition(position) {
    if (position == null) {
        return {
            'horiz': exports.defaultBadgePosition.horizontalPos,
            'vert': exports.defaultBadgePosition.verticalPos,
            'layer': exports.defaultBadgePosition.layer,
            'responsive': exports.defaultBadgePosition.responsive,
        };
    }
    return {
        'horiz': position.horizontalPos,
        'vert': position.verticalPos,
        'layer': position.layer,
        'responsive': position.responsive,
    };
}
exports.serializeBadgeEnumPosition = serializeBadgeEnumPosition;
function serializeBadgeEnumPositionAsKey(position) {
    return JSON.stringify(position);
}
exports.serializeBadgeEnumPositionAsKey = serializeBadgeEnumPositionAsKey;
function isValidSerializedBadgeEnumPosition(val) {
    // All fields are optional, so it's fine if they're not present
    const horizValid = val['horiz'] == undefined || Object.values(HorizontalBadgePos).includes(val['horiz']);
    const vertValid = val['vert'] == undefined || Object.values(VerticalBadgePos).includes(val['vert']);
    const layerValid = val['layer'] == undefined || Object.values(BadgeLayerPos).includes(val['layer']);
    const responsiveValid = val['responsive'] == undefined || Object.values(BadgeResponsiveness).includes(val['responsive']);
    return horizValid && vertValid && layerValid && responsiveValid;
}
exports.isValidSerializedBadgeEnumPosition = isValidSerializedBadgeEnumPosition;
function isHorizontalPos(maybePos) {
    if ((0, checks_1.isNumber)(maybePos)) {
        return !!HorizontalBadgePos[maybePos];
    }
    return false;
}
exports.isHorizontalPos = isHorizontalPos;
function isVerticalPos(maybePos) {
    if ((0, checks_1.isNumber)(maybePos)) {
        return !!VerticalBadgePos[maybePos];
    }
    return false;
}
exports.isVerticalPos = isVerticalPos;
function isLayerPos(maybePos) {
    if ((0, checks_1.isNumber)(maybePos)) {
        return !!BadgeLayerPos[maybePos];
    }
    return false;
}
exports.isLayerPos = isLayerPos;
