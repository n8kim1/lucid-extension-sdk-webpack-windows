type DefinedKeys<T> = Exclude<{
    [P in keyof T]: undefined extends T[P] ? never : P;
}[keyof T], undefined>;
type UndefinedKeys<T> = Exclude<{
    [P in keyof T]: undefined extends T[P] ? P : never;
}[keyof T], undefined>;
/**
 * WithUndefinedAsOptional<{a: number|undefined, b: number, c: any}> => {a?: number|undefined, b:number, c?: any}
 */
export type WithUndefinedAsOptional<T extends object> = {
    [key in keyof T]+?: T[key];
} & {
    [key in DefinedKeys<T>]-?: T[key];
};
export type WithUndefinedAsOptionalRecursive<T> = T extends object ? {
    [key in DefinedKeys<T>]-?: WithUndefinedAsOptionalRecursive<T[key]>;
} & {
    [key in UndefinedKeys<T>]+?: WithUndefinedAsOptionalRecursive<T[key]>;
} : T;
export {};
