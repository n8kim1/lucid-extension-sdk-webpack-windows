"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LucidSpreadsheetIntegrationRegistry = void 0;
const checks_1 = require("../checks");
const cardintegrationdefinitions_1 = require("../sharedcardintegration/cardintegrationdefinitions");
const lucidspreadsheetintegration_1 = require("./lucidspreadsheetintegration");
/** @ignore until spreadsheet integration is ready for launch (CHART-51946) */
class LucidSpreadsheetIntegrationRegistry {
    static nextHookName() {
        return '__lucidspreadsheet__hook' + this.nextHookId++;
    }
    /**
     * Register a spreadsheet integration.
     */
    static addSpreadsheetIntegration(client, spreadsheetIntegration) {
        let configChooserActions;
        const configChooser = spreadsheetIntegration.configChooser;
        if (configChooser instanceof lucidspreadsheetintegration_1.CustomDetailsChooser) {
            const actionName = LucidSpreadsheetIntegrationRegistry.nextHookName();
            configChooserActions = actionName;
            client.registerAction(actionName, async () => {
                try {
                    return await configChooser.getConfig();
                }
                catch (error) { }
                return lucidspreadsheetintegration_1.LucidSpreadsheetIntegrationFailureType.GenericFailure;
            });
        }
        else {
            const actionName = LucidSpreadsheetIntegrationRegistry.nextHookName();
            configChooserActions = { 'l': actionName };
            client.registerAction(actionName, async () => {
                try {
                    const result = await configChooser.getList();
                    if ((0, checks_1.isString)(result)) {
                        return result;
                    }
                    return {
                        'h': result.header,
                        'r': result.rows.map(({ icon, id, values }) => ({ 'i': icon, 'd': id, 'l': values })),
                    };
                }
                catch (error) { }
                return lucidspreadsheetintegration_1.LucidSpreadsheetIntegrationFailureType.GenericFailure;
            });
        }
        const getMultipleSheetsForSpreadsheetDetailsActionName = LucidSpreadsheetIntegrationRegistry.nextHookName();
        client.registerAction(getMultipleSheetsForSpreadsheetDetailsActionName, async (message) => {
            try {
                const result = await spreadsheetIntegration.getMultipleSheetsForSpreadsheetDetails(message['spreadsheetDetails']);
                if ((0, lucidspreadsheetintegration_1.lucidSpreadsheetIntegrationFailureTypeValidator)(result)) {
                    return result;
                }
                else {
                    // Serialize the Map
                    return Array.from(result);
                }
            }
            catch (error) { }
            return lucidspreadsheetintegration_1.LucidSpreadsheetIntegrationFailureType.GenericFailure;
        });
        const serialized = {
            'ld': spreadsheetIntegration.labelDescription,
            'li': spreadsheetIntegration.labelIconUrl,
            'dc': spreadsheetIntegration.dataConnectorName,
            'c': spreadsheetIntegration.addCardsIntegration,
            'gs': configChooserActions,
            'gm': getMultipleSheetsForSpreadsheetDetailsActionName,
        };
        if (spreadsheetIntegration.iconConfiguration) {
            serialized['icu'] = {
                'pi': spreadsheetIntegration.iconConfiguration.primaryIconUrl,
                'li': spreadsheetIntegration.iconConfiguration.lightIconUrl,
                'di': spreadsheetIntegration.iconConfiguration.darkIconUrl,
            };
        }
        if (spreadsheetIntegration.addCard) {
            const addCard = spreadsheetIntegration.addCard;
            serialized['ac'] = {
                'gif': LucidSpreadsheetIntegrationRegistry.nextHookName(),
                'cc': LucidSpreadsheetIntegrationRegistry.nextHookName(),
            };
            client.registerAction(serialized['ac']['gif'], async ({ 'i': inputSoFar }) => {
                const result = await addCard.getInputFields(new Map(inputSoFar));
                return (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(result);
            });
            client.registerAction(serialized['ac']['cc'], async ({ 'i': input }) => {
                const result = await addCard.createCardData(new Map(input));
                return {
                    'c': result.collection.id,
                    'pk': result.primaryKey,
                };
            });
        }
        if (spreadsheetIntegration.getUpstreamSourceUrl) {
            const getUpstreamSourceUrl = LucidSpreadsheetIntegrationRegistry.nextHookName();
            client.registerAction(getUpstreamSourceUrl, async (message) => {
                try {
                    if (!spreadsheetIntegration.getUpstreamSourceUrl) {
                        return lucidspreadsheetintegration_1.LucidSpreadsheetIntegrationFailureType.GenericFailure;
                    }
                    const result = await spreadsheetIntegration.getUpstreamSourceUrl(message['spreadsheetDetails'], message['sheetId']);
                    if ((0, lucidspreadsheetintegration_1.lucidSpreadsheetIntegrationFailureTypeValidator)(result)) {
                        return result;
                    }
                    else {
                        return result.url;
                    }
                }
                catch (error) { }
                return lucidspreadsheetintegration_1.LucidSpreadsheetIntegrationFailureType.GenericFailure;
            });
            serialized['gu'] = getUpstreamSourceUrl;
        }
        client.sendCommand("asi" /* CommandName.AddSpreadsheetIntegration */, serialized);
    }
}
exports.LucidSpreadsheetIntegrationRegistry = LucidSpreadsheetIntegrationRegistry;
LucidSpreadsheetIntegrationRegistry.nextHookId = 0;
