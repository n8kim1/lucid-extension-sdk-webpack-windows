export interface Success<T> {
    value: T;
}
export interface Failure<T> {
    error: T;
}
export type Result<S, F> = Success<S> | Failure<F>;
export declare function isSuccess<S, F>(res: Result<S, F>): res is Success<S>;
export declare function isFailure<S, F>(res: Result<S, F>): res is Failure<F>;
export declare function groupByResultType<S, F>(results: Result<S, F>[]): [Success<S>[], Failure<F>[]];
export declare function isEqual<S, F>(a: Result<S, F> | undefined, b: Result<S, F> | undefined, valueCompS: (p1: S, p2: S) => boolean, valueCompF: (p1: F, p2: F) => boolean): boolean;
