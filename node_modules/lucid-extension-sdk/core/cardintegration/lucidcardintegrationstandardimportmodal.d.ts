import { SerializedFieldType } from '../data/serializedfield/serializedfields';
import { ExtensionCardFieldDefinition, ImportResult, SearchResult } from '../sharedcardintegration/cardintegrationdefinitions';
/**
 * You can use the standard import modal can be used by providing the following data:
 *
 * getSearchFields:
 * Given the values entered by the user so far into search fields, return the list of all search fields
 * to display in the search form.
 *
 * search:
 * Given values entered by the user into the search fields so far, return a collection of data to
 * display in the results table. If partialImportMetadata is also returned, it will be used to create the tasks cards before
 * the import is completedâ€”which allows users to interact with the cards while the
 * data is fetched asynchronously. The collectionId needs to match the id that will be
 * returned from the completed import. The syncDataSourceId needs to match the
 * syncDataSourceId that is passed into performDataAction.
 * The last requirement for the partial import to work is that the primary keys in the data also
 * returned in this search need to match the primary keys that will be returned
 * on import.
 *
 * import:
 * The user checked the boxes beside the given list of items in the collection returned from search().
 * Import them, and return the collection and primary keys in that final collection that were imported.
 *
 * onSetup:
 * If specified, it's going to be called everytime the modal is setting up, right after the modal is displayed
 * and before the initial form fields are shown to the user.
 *
 * The config provided here is only used on the first import from a given source; on subsequent imports,
 * the existing config will remain unchanged to preserve any customizations by the user.
 *
 */
export interface LucidCardIntegrationStandardImportModal {
    /**
     * Heading used in the import modal.
     */
    importModalHeading?: string;
    useIsolatedSearchBarUI?: boolean;
    getSearchFields: (searchSoFar: Map<string, SerializedFieldType>) => Promise<ExtensionCardFieldDefinition[]>;
    search: (fields: Map<string, SerializedFieldType>) => Promise<SearchResult | SearchResult[]>;
    import: (primaryKeys: string[], searchFields: Map<string, SerializedFieldType>) => Promise<ImportResult | ImportResult[]>;
    onSetup?: () => Promise<void>;
}
