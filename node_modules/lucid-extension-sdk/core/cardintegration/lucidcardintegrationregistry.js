"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LucidCardIntegrationRegistry = void 0;
const collectiondefinition_1 = require("../../data/collectiondefinition");
const collectionproxy_1 = require("../../data/collectionproxy");
const dataitemproxy_1 = require("../../data/dataitemproxy");
const datasourceproxy_1 = require("../../data/datasourceproxy");
const checks_1 = require("../checks");
const cardintegrationdefinitions_1 = require("../sharedcardintegration/cardintegrationdefinitions");
const cardintegrationconfig_1 = require("./cardintegrationconfig");
const lucidcardintegrationcustomimportmodal_1 = require("./lucidcardintegrationcustomimportmodal");
class LucidCardIntegrationRegistry {
    static nextHookName() {
        return '__lucidcard__hook' + LucidCardIntegrationRegistry.nextHookId++;
    }
    static registerFieldOptionsCallback(client, callback) {
        const name = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(name, async ({ 'i': inputSoFar }) => {
            const result = await callback(new Map(inputSoFar));
            return result.map((option) => (0, cardintegrationdefinitions_1.serializeCardFieldOption)(option));
        });
        return name;
    }
    static registerFieldSearchCallback(client, callback) {
        const name = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(name, async ({ 'i': inputSoFar, 's': searchText, 'fd': serializedFieldData }) => {
            const fieldData = serializedFieldData ? { name: serializedFieldData.n } : undefined;
            const result = await callback(searchText, new Map(inputSoFar), fieldData);
            return result.map((option) => (0, cardintegrationdefinitions_1.serializeCardFieldOption)(option));
        });
        return name;
    }
    static registerUserSearchCallback(client, callback) {
        const name = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(name, async ({ 'i': inputSoFar, 's': searchText }) => {
            const result = await callback(searchText, new Map(inputSoFar));
            return result.map((userData) => (0, cardintegrationdefinitions_1.serializeCardUserData)(userData));
        });
        return name;
    }
    static registerDependencyMapping(client, cardIntegration, serialized) {
        if (cardIntegration.showDependencyMapping) {
            serialized['sdm'] = true;
        }
        if (cardIntegration.dependencyMappingPhrases) {
            const dependencyMappingPhrases = cardIntegration.dependencyMappingPhrases;
            const manager = dependencyMappingPhrases.manager;
            const emptyState = manager === null || manager === void 0 ? void 0 : manager.emptyState;
            const edit = dependencyMappingPhrases.edit;
            // Strings that appear on the canvas must calculate their locale at runtime,
            // so all users get canvas content in the same locale
            const cardLabelActionName = dependencyMappingPhrases.cardLabel
                ? LucidCardIntegrationRegistry.nextHookName()
                : undefined;
            if (cardLabelActionName) {
                client.registerAction(cardLabelActionName, ({ 'l': locale, 'c': count }) => { var _a; return (_a = dependencyMappingPhrases.cardLabel) === null || _a === void 0 ? void 0 : _a.call(dependencyMappingPhrases, locale, count); });
            }
            const noDependencyHeadingActionName = (emptyState === null || emptyState === void 0 ? void 0 : emptyState.noDependencyHeading)
                ? LucidCardIntegrationRegistry.nextHookName()
                : undefined;
            if (noDependencyHeadingActionName) {
                client.registerAction(noDependencyHeadingActionName, ({ 'k': key }) => {
                    var _a;
                    return (_a = emptyState === null || emptyState === void 0 ? void 0 : emptyState.noDependencyHeading) === null || _a === void 0 ? void 0 : _a.call(emptyState, key);
                });
            }
            const selectedIssueHeadingActionName = (edit === null || edit === void 0 ? void 0 : edit.selectedIssueHeading)
                ? LucidCardIntegrationRegistry.nextHookName()
                : undefined;
            if (selectedIssueHeadingActionName) {
                client.registerAction(selectedIssueHeadingActionName, ({ 'k': key }) => {
                    var _a;
                    return (_a = edit === null || edit === void 0 ? void 0 : edit.selectedIssueHeading) === null || _a === void 0 ? void 0 : _a.call(edit, key);
                });
            }
            serialized['dmp'] = {
                'ep': dependencyMappingPhrases.entrypoint,
                'cl': cardLabelActionName,
                'm': manager
                    ? {
                        'h': manager.header,
                        'all': manager.allLinksLabel,
                        'salb': manager.showAllLinksButton,
                        'halb': manager.hideAllLinksButton,
                        'dsalt': manager.disabledShowAllLinksTooltip,
                        'dhalt': manager.disabledHideAllLinksTooltip,
                        'es': emptyState
                            ? {
                                'cli': emptyState.createLinkInstruction,
                                'nssi': emptyState.noSelectionStateInstruction,
                                'nssh': emptyState.noSelectionStateHeading,
                                'ndh': noDependencyHeadingActionName,
                                'mikwnl': emptyState.multipleIssueKeyWithNoLink,
                            }
                            : undefined,
                    }
                    : undefined,
                'ed': edit
                    ? {
                        'ch': edit.createHeader,
                        'cnlo': edit.createNoLinkOption,
                        'dh': edit.deleteHeader,
                        'dd': edit.deleteDescription,
                        'dab': edit.deleteActionButton,
                        'sih': selectedIssueHeadingActionName,
                    }
                    : undefined,
            };
        }
        if (cardIntegration.importDependencies) {
            const importDependencies = cardIntegration.importDependencies;
            const importDependenciesActionName = LucidCardIntegrationRegistry.nextHookName();
            serialized['idep'] = importDependenciesActionName;
            client.registerAction(importDependenciesActionName, async ({ 'dfi': serializedDependenciesForItems }) => {
                const proxiedDependenciesForItems = new Map(serializedDependenciesForItems.map((_) => {
                    const collectionProxy = new collectionproxy_1.CollectionProxy(_.oci, client);
                    const originalItemProxy = new dataitemproxy_1.DataItemProxy(_.opk, collectionProxy, client);
                    return [originalItemProxy, _.pks];
                }));
                const proxiedResults = await importDependencies(proxiedDependenciesForItems);
                const results = proxiedResults.map((result) => {
                    return {
                        'c': result.collection.id,
                        'pks': result.primaryKeys,
                    };
                });
                return results;
            });
        }
        return serialized;
    }
    static serializeSearchResult(searchResult) {
        return {
            'd': (0, collectiondefinition_1.serializeCollectionDefinition)(searchResult.data),
            'f': (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(searchResult.fields),
            'm': searchResult.partialImportMetadata && {
                'cid': searchResult.partialImportMetadata.collectionId,
                'sid': searchResult.partialImportMetadata.syncDataSourceId,
            },
        };
    }
    /**
     * Register a card integration.
     */
    static addCardIntegration(client, cardIntegration) {
        const getFieldsActionName = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(getFieldsActionName, async (param) => {
            const dataSource = new datasourceproxy_1.DataSourceProxy(param['d'], client);
            const fields = await cardIntegration.fieldConfiguration.getAllFields(dataSource);
            return fields;
        });
        let onSelectedFieldsChangeActionName = undefined;
        const onSelectedFieldsChange = cardIntegration.fieldConfiguration.onSelectedFieldsChange;
        if (onSelectedFieldsChange) {
            onSelectedFieldsChangeActionName = LucidCardIntegrationRegistry.nextHookName();
            client.registerAction(onSelectedFieldsChangeActionName, async (param) => {
                const dataSource = new datasourceproxy_1.DataSourceProxy(param['ds'], client);
                await onSelectedFieldsChange(dataSource, param['sf']);
            });
        }
        const getDefaultConfigActionName = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(getDefaultConfigActionName, async (param) => {
            const dataSource = new datasourceproxy_1.DataSourceProxy(param['d'], client);
            return (0, cardintegrationconfig_1.serializeCardIntegrationConfig)(await cardIntegration.getDefaultConfig(dataSource));
        });
        let showIntroActionName = undefined;
        if (cardIntegration.showIntro) {
            showIntroActionName = LucidCardIntegrationRegistry.nextHookName();
            client.registerAction(showIntroActionName, cardIntegration.showIntro);
        }
        const serialized = {
            'n': cardIntegration.label,
            'dcn': cardIntegration.dataConnectorName,
            'il': cardIntegration.itemLabel,
            'isl': cardIntegration.itemsLabel,
            'u': cardIntegration.iconUrl,
            'ts': cardIntegration.textStyle,
            'fc': {
                'gf': getFieldsActionName,
                'osfc': onSelectedFieldsChangeActionName,
                'fvsc': cardIntegration.fieldConfiguration.fieldValueSearchCallbacks
                    ? [...cardIntegration.fieldConfiguration.fieldValueSearchCallbacks.entries()]
                    : undefined,
                'dsc': cardIntegration.fieldConfiguration.defaultSearchCallback,
            },
            'subn': cardIntegration.searchUserByName,
            'usc': cardIntegration.userSearchCallback,
            'gdc': getDefaultConfigActionName,
            'i': showIntroActionName,
        };
        if (cardIntegration.iconConfiguration) {
            serialized['icu'] = {
                'pi': cardIntegration.iconConfiguration.primaryIconUrl,
                'li': cardIntegration.iconConfiguration.lightIconUrl,
            };
        }
        if (cardIntegration.importModal) {
            const importModal = cardIntegration.importModal;
            if (importModal instanceof lucidcardintegrationcustomimportmodal_1.LucidCardIntegrationCustomImportModal) {
                serialized['cim'] = {
                    'sh': LucidCardIntegrationRegistry.nextHookName(),
                };
                client.registerAction(serialized['cim']['sh'], () => importModal.show());
            }
            else {
                serialized['im'] = {
                    'gsf': LucidCardIntegrationRegistry.nextHookName(),
                    's': LucidCardIntegrationRegistry.nextHookName(),
                    'i': LucidCardIntegrationRegistry.nextHookName(),
                    'os': importModal.onSetup ? LucidCardIntegrationRegistry.nextHookName() : undefined,
                };
                if (importModal.importModalHeading) {
                    serialized['im']['imh'] = importModal.importModalHeading;
                }
                if (importModal.useIsolatedSearchBarUI) {
                    serialized['im']['uisbui'] = importModal.useIsolatedSearchBarUI;
                }
                client.registerAction(serialized['im']['gsf'], async ({ 's': searchSoFar }) => {
                    const result = await importModal.getSearchFields(new Map(searchSoFar));
                    return (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(result);
                });
                client.registerAction(serialized['im']['s'], async ({ 's': param }) => {
                    const result = await importModal.search(new Map(param));
                    if ((0, checks_1.isArray)(result)) {
                        return result.map((searchResult) => {
                            return this.serializeSearchResult(searchResult);
                        });
                    }
                    else {
                        return this.serializeSearchResult(result);
                    }
                });
                client.registerAction(serialized['im']['i'], async ({ 'pks': primaryKeys, 's': searchFields }) => {
                    const result = await importModal.import(primaryKeys, new Map(searchFields));
                    if ((0, checks_1.isArray)(result)) {
                        return result.map((importResult) => {
                            return {
                                'c': importResult.collection.id,
                                'pks': importResult.primaryKeys,
                            };
                        });
                    }
                    return {
                        'c': result.collection.id,
                        'pks': result.primaryKeys,
                    };
                });
                if (serialized['im']['os']) {
                    client.registerAction(serialized['im']['os'], async () => {
                        var _a;
                        await ((_a = importModal.onSetup) === null || _a === void 0 ? void 0 : _a.call(importModal));
                    });
                }
            }
        }
        if (cardIntegration.addCard) {
            const addCard = cardIntegration.addCard;
            serialized['ac'] = {
                'gif': LucidCardIntegrationRegistry.nextHookName(),
                'cc': LucidCardIntegrationRegistry.nextHookName(),
            };
            client.registerAction(serialized['ac']['gif'], async ({ 'i': inputSoFar }) => {
                const result = await addCard.getInputFields(new Map(inputSoFar));
                return (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(result);
            });
            client.registerAction(serialized['ac']['cc'], async ({ 'i': input }) => {
                const result = await addCard.createCardData(new Map(input));
                return {
                    'c': result.collection.id,
                    'pk': result.primaryKey,
                };
            });
        }
        this.registerDependencyMapping(client, cardIntegration, serialized);
        client.sendCommand("aci" /* CommandName.AddCardIntegration */, serialized);
    }
}
exports.LucidCardIntegrationRegistry = LucidCardIntegrationRegistry;
LucidCardIntegrationRegistry.nextHookId = 0;
