import { LucidFields } from '../fieldtypedefinition/lucidfields';
export type SerializedLucidFieldDefaults = {
    [key in LucidFields]?: string;
};
export declare const isSerializedLucidFieldDefaults: (defaults: any) => defaults is SerializedLucidFieldDefaults;
export declare function serializeLucidFieldDefaults(defaults: LucidFieldDefaults): SerializedLucidFieldDefaults;
export type LucidFieldDefaults = Map<LucidFields, string>;
export declare function isLucidFieldDefaults(data: any): data is LucidFieldDefaults;
export declare class LucidFieldDefaultsFactory {
    static deserializeLucidFieldDefaults(serializeDefaults: SerializedLucidFieldDefaults): LucidFieldDefaults;
    /**
     * Merge two LucidFieldDefaults together, with `first` taking precedence over `second`.
     * @param first prioritized defaults
     * @param second secondary defaults to be merged
     * @returns merged LucidFieldDefaults
     */
    static merge(first: LucidFieldDefaults, second: LucidFieldDefaults): LucidFieldDefaults;
}
