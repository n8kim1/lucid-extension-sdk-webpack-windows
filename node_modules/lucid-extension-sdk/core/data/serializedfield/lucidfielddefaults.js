"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LucidFieldDefaultsFactory = exports.isLucidFieldDefaults = exports.serializeLucidFieldDefaults = exports.isSerializedLucidFieldDefaults = void 0;
const checks_1 = require("../../checks");
const lucidfields_1 = require("../fieldtypedefinition/lucidfields");
exports.isSerializedLucidFieldDefaults = (0, checks_1.isRecord)(checks_1.isString);
function serializeLucidFieldDefaults(defaults) {
    const res = {};
    for (const [key, value] of defaults.entries()) {
        res[key] = value;
    }
    return res;
}
exports.serializeLucidFieldDefaults = serializeLucidFieldDefaults;
function isLucidFieldDefaults(data) {
    return data instanceof Map && [...data.keys()].every((key) => (0, lucidfields_1.isLucidFields)(key));
}
exports.isLucidFieldDefaults = isLucidFieldDefaults;
class LucidFieldDefaultsFactory {
    static deserializeLucidFieldDefaults(serializeDefaults) {
        const res = new Map();
        for (const [key, value] of Object.entries(serializeDefaults)) {
            if ((0, lucidfields_1.isLucidFields)(key)) {
                res.set(key, value);
            }
        }
        return res;
    }
    /**
     * Merge two LucidFieldDefaults together, with `first` taking precedence over `second`.
     * @param first prioritized defaults
     * @param second secondary defaults to be merged
     * @returns merged LucidFieldDefaults
     */
    static merge(first, second) {
        return new Map([...second.entries(), ...first.entries()]);
    }
}
exports.LucidFieldDefaultsFactory = LucidFieldDefaultsFactory;
