import { isString } from '../../checks';
import { JsonSerializable } from '../../jsonserializable';
import { SerializedFieldTypeDefinition, isSerializedFieldTypeDefinition } from '../fieldtypedefinition/fieldtypedefinition';
import { LucidFields } from '../fieldtypedefinition/lucidfields';
import { SemanticFields } from '../fieldtypedefinition/semanticfields';
import { SemanticKind } from '../fieldtypedefinition/semantickind';
export declare enum FieldConstraintType {
    REQUIRED = "required",
    LOCKED = "locked",
    MIN_VALUE = "minValue",
    MAX_VALUE = "maxValue",
    SINGLE_LINE_ONLY = "singleLineOnly",
    NO_WHITESPACE = "noWhitespace",
    UNIQUE_EDIT = "uniqueEditType",
    MAX_LENGTH = "maxLength"
}
export declare const isFieldConstraintType: (x: unknown) => x is FieldConstraintType;
export type SerializedFieldConstraint = {
    'Type': FieldConstraintType;
    'Details'?: JsonSerializable;
};
export declare const isSerializedFieldConstraint: (subject: unknown) => subject is import("../../guards").DestructureGuardedTypeObj<{
    Type: (x: unknown) => x is FieldConstraintType;
    Details: (x: unknown) => x is any;
}>;
export type SerializedFieldDefinition = {
    'Name': string;
    'Type': SerializedFieldTypeDefinition;
    'Constraints'?: SerializedFieldConstraint[] | undefined;
    'SyncSchema'?: string | undefined;
    'Mapping'?: readonly LucidFields[] | readonly SemanticFields[] | readonly SemanticKind[] | undefined;
};
export declare const isSerializedFieldDefinition: (subject: unknown) => subject is import("../../guards").DestructureGuardedTypeObj<{
    Name: typeof isString;
    Type: typeof isSerializedFieldTypeDefinition;
    Constraints: (x: unknown) => x is import("../../guards").DestructureGuardedTypeObj<{
        Type: (x: unknown) => x is FieldConstraintType;
        Details: (x: unknown) => x is any;
    }>[] | undefined;
    SyncSchema: (x: unknown) => x is string | undefined;
    Mapping: (x: unknown) => x is LucidFields[] | SemanticKind[] | undefined;
}>;
