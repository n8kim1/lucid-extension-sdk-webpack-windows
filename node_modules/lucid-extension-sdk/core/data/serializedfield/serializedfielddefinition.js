"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSerializedFieldDefinition = exports.isSerializedFieldConstraint = exports.isFieldConstraintType = exports.FieldConstraintType = void 0;
const checks_1 = require("../../checks");
const validators_1 = require("../../validators/validators");
const fieldtypedefinition_1 = require("../fieldtypedefinition/fieldtypedefinition");
const lucidfields_1 = require("../fieldtypedefinition/lucidfields");
const semantickind_1 = require("../fieldtypedefinition/semantickind");
// The options here must match com.lucidchart.data.model.fielddefinition.FieldConstraintType on the backend
var FieldConstraintType;
(function (FieldConstraintType) {
    FieldConstraintType["REQUIRED"] = "required";
    FieldConstraintType["LOCKED"] = "locked";
    FieldConstraintType["MIN_VALUE"] = "minValue";
    FieldConstraintType["MAX_VALUE"] = "maxValue";
    FieldConstraintType["SINGLE_LINE_ONLY"] = "singleLineOnly";
    FieldConstraintType["NO_WHITESPACE"] = "noWhitespace";
    FieldConstraintType["UNIQUE_EDIT"] = "uniqueEditType";
    FieldConstraintType["MAX_LENGTH"] = "maxLength";
})(FieldConstraintType || (exports.FieldConstraintType = FieldConstraintType = {}));
exports.isFieldConstraintType = (0, validators_1.enumValidator)(FieldConstraintType);
exports.isSerializedFieldConstraint = (0, validators_1.objectValidator)({
    'Type': (0, validators_1.enumValidator)(FieldConstraintType),
    'Details': (0, validators_1.option)(checks_1.isAny),
});
exports.isSerializedFieldDefinition = (0, validators_1.strictObjectValidator)({
    'Name': checks_1.isString,
    'Type': fieldtypedefinition_1.isSerializedFieldTypeDefinition,
    'Constraints': (0, validators_1.option)((0, validators_1.arrayValidator)(exports.isSerializedFieldConstraint)),
    'SyncSchema': (0, validators_1.option)(checks_1.isString),
    'Mapping': (0, validators_1.option)((0, validators_1.either)((0, validators_1.arrayValidator)(lucidfields_1.isLucidFields), (0, validators_1.arrayValidator)(semantickind_1.isSemanticKind))),
});
