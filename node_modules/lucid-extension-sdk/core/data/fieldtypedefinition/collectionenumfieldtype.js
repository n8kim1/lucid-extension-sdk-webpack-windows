"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSerializedCollectionEnumFieldType = exports.deserializeCollectionEnumFieldType = exports.isCollectionEnumFieldType = exports.CollectionEnumFieldType = exports.isCollectionEnumFieldNames = exports.CollectionEnumFieldNames = exports.CollectionEnumFieldTypeKey = void 0;
const checks_1 = require("../../checks");
const validators_1 = require("../../validators/validators");
exports.CollectionEnumFieldTypeKey = 'COLLECTION_ENUM';
/**
 * Contains the field names of all valid fields for a groovy metadata collection.
 *
 * This should be kept in sync with GroovyFieldNames in FieldType.scala
 */
var CollectionEnumFieldNames;
(function (CollectionEnumFieldNames) {
    CollectionEnumFieldNames["Name"] = "name";
    CollectionEnumFieldNames["Id"] = "id";
    CollectionEnumFieldNames["Description"] = "description";
    CollectionEnumFieldNames["Color"] = "color";
    CollectionEnumFieldNames["IconUrl"] = "iconUrl";
})(CollectionEnumFieldNames || (exports.CollectionEnumFieldNames = CollectionEnumFieldNames = {}));
exports.isCollectionEnumFieldNames = (0, validators_1.enumValidator)(CollectionEnumFieldNames);
class CollectionEnumFieldType {
    constructor(collectionId) {
        this.collectionId = collectionId;
    }
    toJSON() {
        return { [exports.CollectionEnumFieldTypeKey]: this.collectionId };
    }
}
exports.CollectionEnumFieldType = CollectionEnumFieldType;
/**
 * Specifies which groovy field name is used as the primary key.
 *
 * This should be kept in sync with GroovyFieldNames in FieldType.scala
 */
CollectionEnumFieldType.PRIMARY_KEY = CollectionEnumFieldNames.Id;
const isCollectionEnumFieldType = (fieldType) => {
    return fieldType instanceof CollectionEnumFieldType;
};
exports.isCollectionEnumFieldType = isCollectionEnumFieldType;
function deserializeCollectionEnumFieldType(serializedCollectionEnumFieldType) {
    return new CollectionEnumFieldType(serializedCollectionEnumFieldType[exports.CollectionEnumFieldTypeKey]);
}
exports.deserializeCollectionEnumFieldType = deserializeCollectionEnumFieldType;
function isSerializedCollectionEnumFieldType(fieldType) {
    return (0, checks_1.isObjectUnsafe)(fieldType) && (0, checks_1.isString)(fieldType[exports.CollectionEnumFieldTypeKey]);
}
exports.isSerializedCollectionEnumFieldType = isSerializedCollectionEnumFieldType;
