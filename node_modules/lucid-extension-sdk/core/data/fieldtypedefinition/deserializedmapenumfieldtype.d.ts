export declare class DeserializedMapEnumFieldType {
    readonly validEntries: ReadonlyMap<EnumKeyType, DeserializedMapEnumFieldTypeEntry>;
    constructor(validEntries: ReadonlyMap<EnumKeyType, DeserializedMapEnumFieldTypeEntry>);
    toJSON(): SerializedMapEnumFieldType;
    static fromJSON(val: SerializedMapEnumFieldType): DeserializedMapEnumFieldType;
}
export declare function isDeserializedMapEnumFieldType(val: unknown): val is DeserializedMapEnumFieldType;
export type SerializedMapEnumFieldType = {
    'ValidItems': SerializedEnumEntry[];
};
export declare function isSerializedMapEnumFieldType(fieldType: any): fieldType is SerializedMapEnumFieldType;
export interface DeserializedMapEnumFieldTypeEntry {
    name?: string | null;
    description?: string | null;
    color?: string | null;
    iconUrl?: string | null;
}
export interface SerializedEnumEntry {
    'Id': EnumKeyType;
    'Name'?: string | undefined | null;
    'Description'?: string | undefined | null;
    'Color'?: string | undefined | null;
    'IconUrl'?: string | undefined | null;
}
export declare function isSerializedEnumEntry(entry: any): entry is SerializedEnumEntry;
export declare function serializeEnumEntry(id: EnumKeyType, entry: DeserializedMapEnumFieldTypeEntry): SerializedEnumEntry;
export declare function deserializeEnumEntry(entry: SerializedEnumEntry): [EnumKeyType, DeserializedMapEnumFieldTypeEntry];
export type EnumKeyType = string | number;
