"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLucidFields = exports.LucidFields = void 0;
const validators_1 = require("../../validators/validators");
/**
 * Lucid Fields serve as standardized categories that transcend individual data source labels, facilitating
 * a uniform way to access and manipulate data. For instance, regardless of the source, data that pertains to "titles"
 * or "user information" often carries the same kind of information, though it may be labeled differently across systems.
 * Lucid Fields ensure that such data is recognized and treated consistently within the platform,
 * regardless of external labeling conventions.
 *
 * Semantic Mapping is the process through which Lucid aligns these disparate field names to a set of standardized
 * Lucid Fields. By using Lucid Fields like Title, Description, User, and Project, Lucid simplifies the way
 * users access and interact with data brought in from external sources.
 *
 * Benefits of Lucid Fields:
 * Uniformity: Ensures that data from diverse sources is referenced consistently within Lucid.
 * Integration Simplicity: Simplifies the process of integrating new data sources into Lucid by mapping to an established set of Lucid Fields.
 * Feature Compatibility: Allows for seamless use of Lucid’s intelligent features across all data, regardless of its origin.
 * Data Organization: Provides a structured approach to organizing and grouping data within the Lucid ecosystem.
 *
 * Must be kept in sync with src/jvm/com/lucidchart/data/model/fielddefinition/LucidFields.scala
 */
var LucidFields;
(function (LucidFields) {
    /**
     * Represents the title or main descriptor of an item.
     */
    LucidFields["Title"] = "title";
    /**
     * Captures detailed information or a summary about an item.
     */
    LucidFields["Description"] = "description";
    /**
     * Refers to the user associated with or assigned to an item.
     */
    LucidFields["User"] = "user";
    /**
     * Specific to the reporting user, typically in the context of a ticketing system.
     */
    LucidFields["Reporter"] = "user.reporter";
    /**
     * Refers to the time associated with an item.
     */
    LucidFields["Time"] = "time";
    /**
     * Pertains to the ending or completion time of an item.
     */
    LucidFields["EndTime"] = "time.endtime";
    /**
     * Contains estimations related to items, like time or resource estimates.
     */
    LucidFields["Estimate"] = "estimate";
    /**
     * Reflects status of an item, typically in the context of a ticketing system.
     */
    LucidFields["Status"] = "status";
    /**
     * Classifies the type of issue or item, typically in the context of a ticketing system.
     */
    LucidFields["IssueType"] = "issuetype";
    /**
     * Indicates the importance or urgency level of an item.
     */
    LucidFields["Priority"] = "priority";
    /**
     * Relates to the project with which an item is associated.
     */
    LucidFields["Project"] = "project";
    /**
     * The unique URL or identifier linking back to the item’s source.
     */
    LucidFields["SourceItemUrl"] = "url";
    /**
     * Refers to the URL of the image associated with this item
     */
    LucidFields["ImageUrl"] = "url.image";
    /**
     * Represents the sprint or time interval this item is assigned to.
     */
    LucidFields["Sprint"] = "sprint";
    /**
     * Refers to the team associated with or responsible for this item.
     */
    LucidFields["Team"] = "team";
    /**
     * Refers to the parent item this item belongs to.
     */
    LucidFields["Parent"] = "parent";
})(LucidFields || (exports.LucidFields = LucidFields = {}));
exports.isLucidFields = (0, validators_1.stringEnumValidator)(LucidFields);
