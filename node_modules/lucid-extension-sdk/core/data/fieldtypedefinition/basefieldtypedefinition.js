"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSerializedBaseFieldTypeDefinition = exports.deserializeBaseFieldTypeDefinition = exports.serializeBaseFieldTypeDefinition = exports.isBaseFieldTypeDefinition = void 0;
const checks_1 = require("../../checks");
const collectionenumfieldtype_1 = require("./collectionenumfieldtype");
const deserializedmapenumfieldtype_1 = require("./deserializedmapenumfieldtype");
const fieldtypearray_1 = require("./fieldtypearray");
const literalfieldtype_1 = require("./literalfieldtype");
const ndimensionalfieldtypearray_1 = require("./ndimensionalfieldtypearray");
const scalarfieldtype_1 = require("./scalarfieldtype");
function isBaseFieldTypeDefinition(fieldType) {
    return ((0, scalarfieldtype_1.isScalarFieldTypeEnum)(fieldType) ||
        (0, literalfieldtype_1.isLiteralFieldType)(fieldType) ||
        fieldType instanceof fieldtypearray_1.FieldTypeArray ||
        fieldType instanceof ndimensionalfieldtypearray_1.NDimensionalFieldTypeArray ||
        (0, collectionenumfieldtype_1.isCollectionEnumFieldType)(fieldType) ||
        (0, deserializedmapenumfieldtype_1.isDeserializedMapEnumFieldType)(fieldType));
}
exports.isBaseFieldTypeDefinition = isBaseFieldTypeDefinition;
function serializeBaseFieldTypeDefinition(baseFieldType) {
    // Unfortunately there's no easy way to do goog.DEBUG checks inside lucid-extension-sdk right now.
    // if (goog.DEBUG && !isBaseFieldTypeDefinition(baseFieldType)) {
    //     throw new Error(`Passed non-BaseFieldTypeDefinition into serializeBaseFieldTypeDefinition()!`);
    // }
    if (baseFieldType instanceof literalfieldtype_1.LiteralFieldType ||
        baseFieldType instanceof fieldtypearray_1.FieldTypeArray ||
        baseFieldType instanceof ndimensionalfieldtypearray_1.NDimensionalFieldTypeArray ||
        baseFieldType instanceof collectionenumfieldtype_1.CollectionEnumFieldType ||
        baseFieldType instanceof deserializedmapenumfieldtype_1.DeserializedMapEnumFieldType) {
        return baseFieldType.toJSON();
    }
    return baseFieldType;
}
exports.serializeBaseFieldTypeDefinition = serializeBaseFieldTypeDefinition;
function deserializeBaseFieldTypeDefinition(baseFieldType) {
    if ((0, literalfieldtype_1.isSerializedLiteralFieldType)(baseFieldType)) {
        return (0, literalfieldtype_1.deserializeLiteralFieldType)(baseFieldType);
    }
    if ((0, collectionenumfieldtype_1.isSerializedCollectionEnumFieldType)(baseFieldType)) {
        return (0, collectionenumfieldtype_1.deserializeCollectionEnumFieldType)(baseFieldType);
    }
    if ((0, fieldtypearray_1.isSerializedFieldTypeArray)(baseFieldType, isSerializedBaseFieldTypeDefinition)) {
        return (0, fieldtypearray_1.deserializeFieldTypeArray)(baseFieldType);
    }
    if ((0, ndimensionalfieldtypearray_1.isSerializedNDimensionalFieldTypeArray)(baseFieldType)) {
        return (0, ndimensionalfieldtypearray_1.deserializeNDimensionalFieldTypeArray)(baseFieldType);
    }
    if ((0, deserializedmapenumfieldtype_1.isSerializedMapEnumFieldType)(baseFieldType)) {
        return deserializedmapenumfieldtype_1.DeserializedMapEnumFieldType.fromJSON(baseFieldType);
    }
    return baseFieldType;
}
exports.deserializeBaseFieldTypeDefinition = deserializeBaseFieldTypeDefinition;
function isSerializedBaseFieldTypeDefinition(definition) {
    return ((0, checks_1.isDefAndNotNull)(scalarfieldtype_1.ScalarFieldTypeEnum[definition]) ||
        (0, literalfieldtype_1.isSerializedLiteralFieldType)(definition) ||
        (0, collectionenumfieldtype_1.isSerializedCollectionEnumFieldType)(definition) ||
        (0, fieldtypearray_1.isSerializedFieldTypeArray)(definition, isSerializedBaseFieldTypeDefinition) ||
        (0, ndimensionalfieldtypearray_1.isSerializedNDimensionalFieldTypeArray)(definition) ||
        (0, deserializedmapenumfieldtype_1.isSerializedMapEnumFieldType)(definition));
}
exports.isSerializedBaseFieldTypeDefinition = isSerializedBaseFieldTypeDefinition;
