"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickToolsRegistry = void 0;
const checks_1 = require("../checks");
/**
 * Wrapper class for accessing Quick Tools in your extension.
 * Each extension (not package) uses its own QuickToolsRegistry.
 */
class QuickToolsRegistry {
    static nextHookName() {
        return '__quicktools__hook' + QuickToolsRegistry.nextHookId++;
    }
    static registerActionAndReturnHook(client, callback) {
        const hookname = QuickToolsRegistry.nextHookName();
        client.registerAction(hookname, callback);
        return hookname;
    }
    static registerActionIfExistsAndReturnHook(client, callback) {
        if ((0, checks_1.isDef)(callback)) {
            return this.registerActionAndReturnHook(client, callback);
        }
        return undefined;
    }
    /**
     * Adds the specified quick action to the quick action toolbar.
     * @param quickAction object that represents the quick action to add.
     */
    static addQuickActionToToolbar(client, quickAction) {
        var _a;
        if (this.actionTypesSet.has(quickAction.quickActionType)) {
            throw new Error('This action type already exists in this extension:' + quickAction.quickActionType);
        }
        this.actionTypesSet.add(quickAction.quickActionType);
        client.sendCommand("aqa" /* CommandName.AddQuickAction */, {
            'qat': quickAction.quickActionType,
            'l': quickAction.label,
            'a': this.registerActionAndReturnHook(client, quickAction.action),
            'i': quickAction.iconUrl,
            'ea': this.registerActionIfExistsAndReturnHook(client, quickAction.enabledAction),
            'va': this.registerActionIfExistsAndReturnHook(client, quickAction.visibleAction),
            'tt': (_a = quickAction.tooltips) === null || _a === void 0 ? void 0 : _a.map((tooltip) => {
                return {
                    'a': this.registerActionIfExistsAndReturnHook(client, tooltip.action),
                    'l': tooltip.label,
                };
            }),
        });
    }
}
exports.QuickToolsRegistry = QuickToolsRegistry;
QuickToolsRegistry.actionTypesSet = new Set();
QuickToolsRegistry.nextHookId = 0;
