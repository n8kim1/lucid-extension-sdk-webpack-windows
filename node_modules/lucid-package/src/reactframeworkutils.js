"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReactEditorExtension = void 0;
const fs = require("fs/promises");
const path = require("path");
const editorextension_1 = require("./editorextension");
const installationutil_1 = require("./installationutil");
const package_1 = require("./package");
const theme_1 = require("./theme");
async function createReactEditorExtension(name, flavor, isInternal, skipSDKDependency) {
    await (0, editorextension_1.createEditorExtension)(name, isInternal, skipSDKDependency, path.join('react', 'skeleton'), [
        'webpack-shell-plugin-next',
    ]);
    let typescript = false;
    if (flavor === 'Javascript') {
        typescript = false;
    }
    else if (flavor === 'Typescript') {
        typescript = true;
    }
    else {
        console.log((0, theme_1.error)('Unexpected flavor type'));
        return;
    }
    const reactProjectName = name;
    const reactEditorExtensionTargetFolder = path.join(process.cwd(), reactProjectName);
    const publicTargetFolder = path.join(process.cwd(), '..', '..', 'public');
    console.log((0, theme_1.success)('Creating React project in ' + reactEditorExtensionTargetFolder));
    (0, installationutil_1.installReactProject)(reactProjectName, typescript);
    await fs.mkdir(path.join(publicTargetFolder, name));
    await copyFilesTo(path.join(reactEditorExtensionTargetFolder, 'public'), path.join(publicTargetFolder, name), [
        '.png',
        '.svg',
        '.ico',
    ]);
    await copyFilesTo(path.join(reactEditorExtensionTargetFolder, 'src'), path.join(publicTargetFolder, name), [
        '.png',
        '.svg',
        '.ico',
    ]);
    const webpackConfig = (await fs.readFile('webpack.config.js', 'utf8')).replace('<<dynamicname>>', reactProjectName);
    const extensionTemplateCode = (await fs.readFile(path.join('src', 'extension.ts'), 'utf8')).replace('<<dynamicname>>', reactProjectName);
    await fs.writeFile(path.join(process.cwd(), 'webpack.config.js'), webpackConfig);
    await fs.writeFile(path.join('src', 'extension.ts'), extensionTemplateCode);
    process.chdir(path.join(reactProjectName));
    const packageJson = await (0, package_1.readJson)('package.json');
    packageJson.name = reactProjectName;
    await fs.writeFile('package.json', JSON.stringify(packageJson, null, 4));
    /*
    Hacky solution to change react template from create-react-app; susceptible to changes in create-react-app;
    Out of the box, the logo from create-react-app uses the typescript imported .png file which does not work in our
    extension since we need to specify the location of the image w.r.t the public folder of lucid-package.
    The following lines replace that image location with that of copied image location in the package's public folder.
    */
    const appName = typescript ? 'App.tsx' : 'App.js';
    const apptsx = (await fs.readFile(path.join('src', appName), 'utf8')).replace('{logo}', '"logo.svg"');
    await fs.writeFile(path.join('src', appName), apptsx);
    console.log('Installing React dependencies');
    (0, installationutil_1.installDependenciesIfNeeded)(isInternal, skipSDKDependency);
}
exports.createReactEditorExtension = createReactEditorExtension;
async function copyFilesTo(sourceFolder, destFolder, endingWith) {
    (await fs.readdir(sourceFolder))
        .filter((filename) => endingWith.some((ext) => filename.endsWith(ext)))
        .forEach((source) => fs.copyFile(path.join(sourceFolder, source), path.join(destFolder, source)));
}
