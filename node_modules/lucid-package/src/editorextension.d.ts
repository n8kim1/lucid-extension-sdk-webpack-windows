import { Compiler } from 'webpack';
export declare function createEditorExtension(name: string, isInternal: boolean, skipSDKDependency: boolean, source?: string, deps?: string[]): Promise<void>;
export declare function buildEditorExtension(name: string, isInternal: boolean, quiet?: boolean, skipSdkDependency?: boolean): Promise<void>;
export declare function updateExtensionSDK(name: string): Promise<void>;
/**
 * Uses webpack to watch for changes in the editor extension
 * @param name The editor extension name
 * @param quiet If true, will only show errors in output
 * @param ignoreNodeModules If true, while serving, will not autoreload on changes to node_modules files
 */
export declare function watchEditorExtension(name: string, isInternal: boolean, quiet?: boolean, ignoreNodeModules?: boolean): Promise<{
    name: string;
    compiler: Compiler;
}>;
/**
 * Runs the editor extensions and shape libraries in debug mode, possibly including watching code for changes.
 * @param extensionNames The names of the editor extensions
 * @param quiet If true, will only show errors in output
 * @param watchIgnoreNodeModules If true, while serving, will not autoreload on changes to node_modules files
 */
export declare function debugEditorExtension(extensionNames: string[], isInternal: boolean, quiet?: boolean, pickAnyPort?: boolean, watchIgnoreNodeModules?: boolean): Promise<void>;
export declare function getAllExtensionNames(): Promise<string[]>;
