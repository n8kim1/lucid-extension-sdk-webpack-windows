"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installAngularProject = exports.installReactProject = exports.installDependenciesIfNeeded = void 0;
const oldFs = require("fs");
const path = require("path");
const shellutil_1 = require("./shellutil");
const theme_1 = require("./theme");
function installDependenciesIfNeeded(isInternal, skipSDKDependency = false, additionalDependencies = []) {
    if (!oldFs.existsSync('node_modules')) {
        console.log((0, shellutil_1.execSyncLoggingOutputOnError)('npm install --silent').toString());
    }
    const sdkDir = path.join('node_modules', 'lucid-extension-sdk');
    if (isInternal) {
        //Delete any lucid-extension-sdk directory; let it come from //extensibility/packages/node_modules/lucid-extension-sdk
        (0, shellutil_1.execSyncLoggingOutputOnError)(`rm -rf ${sdkDir}`);
    }
    else if (!oldFs.existsSync(sdkDir) && !skipSDKDependency) {
        // Otherwise, install the NPM version of the SDK directly. If you would like to opt out of this you can use the
        // `--skip-sdk` CLI flag.
        console.log((0, theme_1.success)('Adding dependency on SDK'));
        console.log((0, shellutil_1.execSyncLoggingOutputOnError)('npm install --save lucid-extension-sdk').toString());
    }
    if (additionalDependencies.length) {
        console.log((0, shellutil_1.execSyncLoggingOutputOnError)(`npm install --silent ${additionalDependencies.reduce((acc, current) => `${acc} ${current}`, '')}`).toString());
    }
}
exports.installDependenciesIfNeeded = installDependenciesIfNeeded;
function installReactProject(reactProjectName, typescript) {
    console.log((0, shellutil_1.execSyncLoggingOutputOnError)(`npm install create-react-app && npx create-react-app ${reactProjectName} ${typescript ? '--template typescript' : ''}`).toString());
}
exports.installReactProject = installReactProject;
function installAngularProject(angularProjectName) {
    console.log((0, shellutil_1.execSyncLoggingOutputOnError)(`npm install @angular/cli && npx ng new ${angularProjectName}`).toString());
}
exports.installAngularProject = installAngularProject;
