import { SerializedFields, SerializedFieldType } from '../serializedfield/serializedfields';
import { SerializedSchema } from '../serializedfield/serializedschema';
export declare const FlattenedReferenceKeyId = "192d0e9f-2f5a-4032-9f03-59bbf1ea5891";
export declare const FlattenedReferenceKeyName = "192d0e9f-2f5a-4032-9f03-59bbf1ea5891_n";
export interface SerializedReferenceKey {
    'cid': string;
    'pk': string;
    'wl'?: string[] | undefined;
    'ro'?: boolean | undefined;
    'f'?: {
        'ts': number;
        'pd': TypedSerializedFlattenedReference;
        'md'?: SerializedFields;
        'e'?: string;
    } | undefined;
}
export declare type TypedSerializedFlattenedReference = {
    'sc': SerializedSchema;
    'n'?: string;
    'd': {
        [index: string]: SerializedFieldType;
    };
};
export declare type UnTypedSerializedFlattenedReference = {
    [FlattenedReferenceKeyId]: true;
    [FlattenedReferenceKeyName]?: string;
    [index: string]: SerializedFieldType;
};
export declare type SerializedFlattenedReference = TypedSerializedFlattenedReference | UnTypedSerializedFlattenedReference;
export declare type SerializedReferenceKeyType = SerializedReferenceKey | SerializedFlattenedReference;
/** @ignore */
export declare function isTypedSerializedFlattenedReference(data: unknown): data is TypedSerializedFlattenedReference;
/** @ignore */
export declare function isUnTypedSerializedFlattenedReference(data: unknown): data is UnTypedSerializedFlattenedReference;
/** @ignore */
export declare function isSerializedFlattenedReference(data: unknown): data is SerializedFlattenedReference;
