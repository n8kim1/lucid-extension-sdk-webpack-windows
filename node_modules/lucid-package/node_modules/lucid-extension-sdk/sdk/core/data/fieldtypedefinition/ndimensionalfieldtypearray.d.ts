import { LiteralFieldType, SerializedLiteralFieldType } from './literalfieldtype';
import { ScalarFieldTypeEnum } from './scalarfieldtype';
export declare class NDimensionalFieldTypeArray {
    readonly validTypesArray: (ScalarFieldTypeEnum | LiteralFieldType)[];
    constructor(validTypesArray: (ScalarFieldTypeEnum | LiteralFieldType)[]);
    getInnerTypes(): (ScalarFieldTypeEnum | LiteralFieldType | this)[];
    getInnerNonArrayTypes(): (ScalarFieldTypeEnum | LiteralFieldType)[];
    serialize(): SerializedNDimensionalFieldTypeArray;
}
export declare function isValidTypeForNDimensionalFieldTypeArray(fieldType: any): fieldType is ScalarFieldTypeEnum | LiteralFieldType;
export declare function isNDimensionalFieldTypeArray(fieldType: any): fieldType is NDimensionalFieldTypeArray;
export declare type SerializedNDimensionalFieldTypeArray = {
    'ND': true;
    'validTypes': (ScalarFieldTypeEnum | SerializedLiteralFieldType)[];
};
export declare function isSerializedNDimensionalFieldTypeArray(fieldType: any): fieldType is SerializedNDimensionalFieldTypeArray;
export declare function deserializeNDimensionalFieldTypeArray(serializedNDimensionalFieldTypeArray: SerializedNDimensionalFieldTypeArray): NDimensionalFieldTypeArray;
