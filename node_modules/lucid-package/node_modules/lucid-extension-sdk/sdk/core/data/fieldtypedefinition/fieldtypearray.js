"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeFieldTypeArray = exports.isSerializedFieldTypeArray = exports.FieldTypeArray = exports.BaseFieldTypeArray = void 0;
const checks_1 = require("../../checks");
const collectionenumfieldtype_1 = require("./collectionenumfieldtype");
const literalfieldtype_1 = require("./literalfieldtype");
const scalarfieldtype_1 = require("./scalarfieldtype");
class BaseFieldTypeArray {
    constructor(validTypesArray) {
        this.validTypesArray = validTypesArray;
    }
    getInnerTypes() {
        return this.validTypesArray;
    }
    getInnerNonArrayTypes() {
        return this.validTypesArray.filter((innerType) => !(innerType instanceof BaseFieldTypeArray));
    }
    serialize() {
        return {
            'ND': false,
            'validTypes': this.validTypesArray.map((t) => this.serializeType(t)),
        };
    }
}
exports.BaseFieldTypeArray = BaseFieldTypeArray;
class FieldTypeArray extends BaseFieldTypeArray {
    serializeType(t) {
        return (0, scalarfieldtype_1.isScalarFieldTypeEnum)(t) ? t : t.serialize();
    }
}
exports.FieldTypeArray = FieldTypeArray;
function isSerializedFieldTypeArray(fieldType, validateTypeCheck) {
    return ((0, checks_1.isObject)(fieldType) &&
        (0, checks_1.isBoolean)(fieldType['ND']) &&
        fieldType['ND'] === false &&
        (0, checks_1.isArray)(fieldType['validTypes']) &&
        fieldType['validTypes'].every((validType) => {
            return validateTypeCheck(validType);
        }));
}
exports.isSerializedFieldTypeArray = isSerializedFieldTypeArray;
function deserializeFieldTypeArray(serializedFieldTypeArray) {
    return new FieldTypeArray(serializedFieldTypeArray['validTypes'].map((t) => {
        if ((0, literalfieldtype_1.isSerializedLiteralFieldType)(t)) {
            return (0, literalfieldtype_1.deserializeLiteralFieldType)(t);
        }
        else if ((0, collectionenumfieldtype_1.isSerializedCollectionEnumFieldType)(t)) {
            return (0, collectionenumfieldtype_1.deserializeCollectionEnumFieldType)(t);
        }
        else if ((0, checks_1.isObject)(t)) {
            return deserializeFieldTypeArray(t);
        }
        return t;
    }));
}
exports.deserializeFieldTypeArray = deserializeFieldTypeArray;
