"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeNDimensionalFieldTypeArray = exports.isSerializedNDimensionalFieldTypeArray = exports.isNDimensionalFieldTypeArray = exports.isValidTypeForNDimensionalFieldTypeArray = exports.NDimensionalFieldTypeArray = void 0;
const checks_1 = require("../../checks");
const literalfieldtype_1 = require("./literalfieldtype");
const scalarfieldtype_1 = require("./scalarfieldtype");
class NDimensionalFieldTypeArray {
    constructor(validTypesArray) {
        this.validTypesArray = validTypesArray;
    }
    getInnerTypes() {
        return [...this.validTypesArray, this];
    }
    getInnerNonArrayTypes() {
        return this.validTypesArray.filter((innerType) => (0, scalarfieldtype_1.isScalarFieldTypeEnum)(innerType) || (0, literalfieldtype_1.isLiteralFieldType)(innerType));
    }
    serialize() {
        return {
            'ND': true,
            'validTypes': this.validTypesArray.map((t) => ((0, scalarfieldtype_1.isScalarFieldTypeEnum)(t) ? t : t.serialize())),
        };
    }
}
exports.NDimensionalFieldTypeArray = NDimensionalFieldTypeArray;
function isValidTypeForNDimensionalFieldTypeArray(fieldType) {
    return (0, scalarfieldtype_1.isScalarFieldTypeEnum)(fieldType) || (0, literalfieldtype_1.isLiteralFieldType)(fieldType);
}
exports.isValidTypeForNDimensionalFieldTypeArray = isValidTypeForNDimensionalFieldTypeArray;
function isNDimensionalFieldTypeArray(fieldType) {
    return fieldType instanceof NDimensionalFieldTypeArray;
}
exports.isNDimensionalFieldTypeArray = isNDimensionalFieldTypeArray;
function isSerializedNDimensionalFieldTypeArray(fieldType) {
    return ((0, checks_1.isObject)(fieldType) &&
        (0, checks_1.isBoolean)(fieldType['ND']) &&
        fieldType['ND'] === true &&
        (0, checks_1.isTypedArray)(checks_1.isAny)(fieldType['validTypes']) &&
        fieldType['validTypes'].every((validType) => {
            return (0, checks_1.isDefAndNotNull)(scalarfieldtype_1.ScalarFieldTypeEnum[validType]) || (0, literalfieldtype_1.isSerializedLiteralFieldType)(validType);
        }));
}
exports.isSerializedNDimensionalFieldTypeArray = isSerializedNDimensionalFieldTypeArray;
function deserializeNDimensionalFieldTypeArray(serializedNDimensionalFieldTypeArray) {
    return new NDimensionalFieldTypeArray(serializedNDimensionalFieldTypeArray['validTypes'].map((t) => {
        if ((0, literalfieldtype_1.isSerializedLiteralFieldType)(t)) {
            return (0, literalfieldtype_1.deserializeLiteralFieldType)(t);
        }
        return t;
    }));
}
exports.deserializeNDimensionalFieldTypeArray = deserializeNDimensionalFieldTypeArray;
