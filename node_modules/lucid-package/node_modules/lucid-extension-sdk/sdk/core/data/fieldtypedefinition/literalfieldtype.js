"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeLiteralFieldType = exports.isSerializedLiteralFieldType = exports.isLiteralFieldType = exports.LiteralFieldType = void 0;
const checks_1 = require("../../checks");
const scalarfieldtype_1 = require("./scalarfieldtype");
class LiteralFieldType {
    constructor(literal) {
        this.scalarFieldType = scalarfieldtype_1.ScalarFieldTypeEnum.ANY;
        if ((0, checks_1.isString)(literal)) {
            this.literal = literal.substring(LiteralFieldType.literalStringPrefix.length);
            this.scalarFieldType = scalarfieldtype_1.ScalarFieldTypeEnum.STRING;
        }
        else if ((0, checks_1.isBoolean)(literal)) {
            this.literal = literal;
            this.scalarFieldType = scalarfieldtype_1.ScalarFieldTypeEnum.BOOLEAN;
        }
        else {
            this.literal = literal;
            this.scalarFieldType = scalarfieldtype_1.ScalarFieldTypeEnum.NUMBER;
        }
    }
    getLiteral() {
        return this.literal;
    }
    getScalarFieldType() {
        return this.scalarFieldType;
    }
    serialize() {
        if (this.scalarFieldType === scalarfieldtype_1.ScalarFieldTypeEnum.STRING) {
            return LiteralFieldType.literalStringPrefix + this.literal;
        }
        return this.literal.toString();
    }
}
exports.LiteralFieldType = LiteralFieldType;
LiteralFieldType.literalStringPrefix = '%';
function isLiteralFieldType(fieldType) {
    return fieldType instanceof LiteralFieldType;
}
exports.isLiteralFieldType = isLiteralFieldType;
function isSerializedLiteralFieldType(definition) {
    return (0, checks_1.isString)(definition);
}
exports.isSerializedLiteralFieldType = isSerializedLiteralFieldType;
/**
 * String literals without the literalStringPrefix will return the boolean literal false
 */
function deserializeLiteralFieldType(serializedLiteralFieldType) {
    if (serializedLiteralFieldType.startsWith(LiteralFieldType.literalStringPrefix)) {
        return new LiteralFieldType(serializedLiteralFieldType);
    }
    const numberLiteral = Number(serializedLiteralFieldType);
    if (isNaN(numberLiteral) ||
        numberLiteral === Number.POSITIVE_INFINITY ||
        numberLiteral === Number.NEGATIVE_INFINITY) {
        return new LiteralFieldType(serializedLiteralFieldType === 'true');
    }
    return new LiteralFieldType(numberLiteral);
}
exports.deserializeLiteralFieldType = deserializeLiteralFieldType;
