export declare function objectEvery<T, O extends {
    [key: string]: any;
}>(obj: O, f: (this: T | undefined, _0: O[typeof _1], _1: string & keyof O, _2: O) => any, opt_this?: T): boolean;
export declare function flatten<T>(a: T[][]): T[];
export declare function entries<T>(obj: {
    [key: string]: T;
}): [string, T][];
export declare function fromEntries<K extends PropertyKey, T>(entries: Iterable<readonly [K, T]>): {
    [key in K]: T;
};
