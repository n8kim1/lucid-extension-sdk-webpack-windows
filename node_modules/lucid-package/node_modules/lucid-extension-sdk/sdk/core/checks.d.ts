/**
 * Returns true if the specified value is not undefined.
 *
 * @param val Variable to test.
 * @return Whether variable is defined.
 */
export declare function isDef<F>(val: F | undefined): val is F;
/**
 * Returns true if the specified value is null.
 * @param val Variable to test.
 * @return Whether variable is null.
 */
export declare function isNull(val: unknown): val is null;
/**
 * Returns true if the specified value is undefined.
 * @param val Variable to test.
 * @return Whether variable is undefined.
 */
export declare function isUndefined(val: unknown): val is undefined;
/**
 * Returns true if the specified value is defined and not null.
 * @param val Variable to test.
 * @return Whether variable is defined and not null.
 */
export declare function isDefAndNotNull<F>(val: F | null | undefined): val is F;
/**
 * Returns true if the specified value is null or undefined.
 * @param val Variable to test
 * @return Whether the variable is null or undefined.
 */
export declare function isNullish(val: unknown): val is null | undefined;
/**
 * Returns true if the specified value is a string.
 * @param val Variable to test.
 * @return Whether variable is a string.
 */
export declare function isString(val: unknown): val is string;
/**
 * Returns true if the specified value is a boolean.
 * @param val Variable to test.
 * @return Whether variable is boolean.
 */
export declare function isBoolean(val: unknown): val is boolean;
/**
 * Returns true if the specified value is a number.
 * @param val Variable to test.
 * @return Whether variable is a number.
 */
export declare function isNumber(val: unknown): val is number;
/**
 * Returns true if the specified value is an integer.
 * @param val Variable to test.
 * @return Whether variable is an integer.
 */
export declare function isInt(val: unknown): val is number;
/**
 * Returns true if the specified value is either positive or negative infinity.
 * @param val Variable to test.
 * @returns Whether variable is positive or negative infinity.
 */
export declare function isInfinite(val: unknown): val is number;
export declare function isFunction(val: unknown): val is (...unknownArgs: any[]) => unknown;
/**
 * Returns true if the specified value is an object (i.e. it's safe to do property accesses on it).
 *
 * This is safer than using goog.isObject directly (this is its code inlined) because it doesn't introduce an `any`.
 * @param val Variable to test.
 * @return Whether variable is an object.
 */
export declare function isObject(val: unknown): val is Record<string, unknown>;
/**
 * Returns true if the specified value is an object (i.e. it's safe to do property accesses on it).
 *
 * This is safer than using goog.isObject directly (this is its code inlined) because it doesn't introduce an `any`.
 * @param val Variable to test.
 * @return Whether variable is an object.
 */
export declare function isRecord<T>(typeGuard: (a: unknown) => a is T): (val: unknown) => val is Record<string, T>;
/**
 * Returns true if the specified value is an array.
 *
 * This is safer than using Array.isArray directly because it doesn't introduce an `any` type.
 * @param val Variable to test.
 * @return Whether variable is an array.
 */
export declare function isArray(val: unknown): val is unknown[];
/**
 * Returns true if the specified value is an array and every element passes the type guard function.
 *
 * @param val Variable to test.
 * @param typeGuard the type guard function to test every element in the array.
 * @return Whether variable is an array of the given type.
 */
export declare function isTypedArray<T>(typeGuard: (a: unknown) => a is T): (val: unknown) => val is T[];
/**
 * Returns true if the specified object is either empty or all existing keys map to a nullish value
 *
 * @param val Variable to test
 * @return Whether variable is empty or maps exclusively to nullish values
 */
export declare function isEmptyOrNullishObject(val: unknown): val is {};
/**
 * @deprecated Prefer isUnknown
 */
export declare function isAny(val: unknown): val is any;
export declare function isUnknown(val: unknown): val is unknown;
export declare function isPromise(val: unknown): val is Promise<unknown>;
export declare function isLiteral<T extends string | number | symbol | true | false>(t: T): (x: unknown) => x is T;
declare type AbstractConstructor<T> = Function & {
    prototype: T;
};
/**
 * Since `instanceof` should generally be avoided, this function should generally be avoided as well.
 *
 * A valid use case is for native types, like Uint8Array.
 */
export declare function isInstanceOf<T>(klass: AbstractConstructor<T>): (x: unknown) => x is T;
export {};
