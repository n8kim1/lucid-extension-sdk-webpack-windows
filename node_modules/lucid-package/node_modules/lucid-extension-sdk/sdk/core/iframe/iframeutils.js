"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseIFrameAttributesFromHTML = exports.generateIFrameHTML = exports.DEFAULT_IFRAME_HEIGHT = exports.DEFAULT_IFRAME_WIDTH = void 0;
const checks_1 = require("../checks");
/**
 * Aspect ratio 16:9, wider rectangle
 * This will be the default setting if not provided
 *
 * The values are small since we only use width and height value to calculate aspect ratio
 * So in this case, it will be width/height, which will be 16:9
 * It's the same result as 1600 and 900 as default width and height
 */
exports.DEFAULT_IFRAME_WIDTH = 16;
exports.DEFAULT_IFRAME_HEIGHT = 9;
/**
 * Iframes from external sources are not trustworthy to be embedded directly. They could cause security vulnerability,
 * including XSS attacks. Even if the iframes come from sources with good reputation, it is still a good practice to
 * sanitize their source HTML and restrict their functionality in the sandbox before embedding them to our apps.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe for a list of iframe attributes.
 */
const iframeRegExps = {
    allow: /allow="(.*?)"/i,
    src: /src="((https:\/\/|\/\/).*?)"/i,
    height: /height="(\d*?)"/i,
    width: /width="(\d*?)"/i,
    title: /title="(.*?)"/i,
};
/**
 * Generate iframe HTML from the IFrameAttributes object
 * @returns the generated iframe HTML
 * @ignore
 * */
function generateIFrameHTML(iframeAttributes) {
    let iframeHTML = `<iframe src="${iframeAttributes.src}"`;
    if (iframeAttributes.width) {
        iframeHTML += ` width="${iframeAttributes.width.toString()}"`;
    }
    if (iframeAttributes.height) {
        iframeHTML += ` height="${iframeAttributes.height.toString()}"`;
    }
    if (iframeAttributes.title) {
        // Escape all the double quotation marks
        const title = iframeAttributes.title.replace(/"/g, '&quot;');
        iframeHTML += ` title="${title}"`;
    }
    if (iframeAttributes.allow) {
        iframeHTML += ` allow="${iframeAttributes.allow}"`;
    }
    iframeHTML += '></iframe>';
    return iframeHTML;
}
exports.generateIFrameHTML = generateIFrameHTML;
/**
 * Parse the iframe HTML, i.e. <iframe>...</iframe> into the IFrameAttributes object
 * @returns the required attributes to render the target iframe
 * @ignore
 */
function parseIFrameAttributesFromHTML(iframeHTML) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const allow = (_b = (_a = iframeHTML.match(iframeRegExps.allow)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : '';
    const src = (_d = (_c = iframeHTML.match(iframeRegExps.src)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '';
    const height = (_e = iframeHTML.match(iframeRegExps.height)) === null || _e === void 0 ? void 0 : _e[1];
    const width = (_f = iframeHTML.match(iframeRegExps.width)) === null || _f === void 0 ? void 0 : _f[1];
    const title = (_h = (_g = iframeHTML.match(iframeRegExps.title)) === null || _g === void 0 ? void 0 : _g[1]) !== null && _h !== void 0 ? _h : '';
    return {
        allow: allow,
        src: src,
        height: !(0, checks_1.isUndefined)(height) ? Number.parseInt(height) : exports.DEFAULT_IFRAME_HEIGHT,
        width: !(0, checks_1.isUndefined)(width) ? Number.parseInt(width) : exports.DEFAULT_IFRAME_WIDTH,
        title: title,
    };
}
exports.parseIFrameAttributesFromHTML = parseIFrameAttributesFromHTML;
