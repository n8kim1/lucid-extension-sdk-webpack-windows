import { HorizontalBadgePos, VerticalBadgePos } from '../properties/datagraphic/badgeposition';
/**
 * When configuring a field on a LucidCardBlock to be displayed as a data graphic, one of these values specifies
 * the function to convert the field value to the data graphic settings. The definition of these functions is in
 * LucidCardsLibrary.registerStencilDisplayTypes.
 */
export declare enum FieldDisplayType {
    /**
     * Text badge with the full text of the field.
     * Black text on a light gray background in the upper-right of the card.
     */
    BasicTextBadge = "BasicTextBadge",
    /**
     * Given a name (usually of a user), puts a text badge with their initials (first letter of each name)
     * at the bottom-left of the card, black text on a light gray background.
     */
    InitializedString = "InitializedString",
    /**
     * Given a number, display the number in the bottom-left of the card. If the number is higher than 999,
     * display 999.
     */
    StandardEstimation = "StandardEstimation",
    /**
     * Given a URL, display a small image cropped into a circle in the lower-left of the card.
     */
    ImageBadge = "ImageBadge",
    /**
     * Given a URL, display a small image cropped into a square in the lower-left of the card.
     */
    SquareImageBadge = "SquareImageBadge",
    /**
     * Given a date, display a small calendar icon alongside a very short version of the date
     * as a string, e.g. "Sep 9"
     */
    DateBadge = "DateBadge",
    /** Given an object containing iconUrl (optional) and name (optional), determine whether
     * to display as an ImageBadge or InitializedString (or nothing, if neither is present).
     */
    UserProfile = "UserProfile"
}
export declare const isFieldDisplayType: (x: unknown) => x is FieldDisplayType;
/**
 * When configuring a field on a LucidCardBlock to be displayed as a data graphic, this click handler value
 * specifies what to do when the user clicks on the data graphic produced.
 */
export declare enum OnClickHandlerKeys {
    /**
     * Display the UI panel to edit fields on the data associated with the card
     */
    BasicEditPanel = "BasicEditPanel",
    /**
     * Open a new browser window to a URL specified by linkFormula
     */
    OpenBrowserWindow = "OpenBrowserWindow"
}
export declare const isOnClickHandlerKey: (x: unknown) => x is OnClickHandlerKeys;
export interface StencilConfig {
    /**
     * How should we generate the stencil/data graphic from the specified field value?
     * These are registered in LucidCardsLibrary.registerStencilDisplayTypes.
     */
    displayType: FieldDisplayType;
    /**
     * For displayType values that support it, you may provide an override for the
     * background color for this data. If this is not provided, the background color
     * will default to the background color of the card itself, darkened 5%.
     *
     * This may be provided as a literal color hex, e.g. "#00ff00ff" or as a formula
     * by starting the string with "=", e.g. "=darken("#ffffff", 0.5)"
     */
    backgroundColor?: string;
    /**
     * If specified, the result of this formula (executed in the context of the data item
     * associated with this card) will be used instead of the raw field value when
     * creating the data graphic. This can be useful if, for example, you see to convert
     * an ID into a URL.
     */
    valueFormula?: string;
    /**
     * If specified, the result of this formula (executed in the context of the data item
     * associated with this card) will be used as a tooltip when the user hovers the
     * cursor over this data graphic.
     */
    tooltipFormula?: string;
    /**
     * Each display type has its default location on the card. You can override those
     * default locations by setting these values.
     */
    horizontalPosition?: HorizontalBadgePos;
    /**
     * Each display type has its default location on the card. You can override those
     * default locations by setting these values.
     */
    verticalPosition?: VerticalBadgePos;
    /**
     * If specified, what behavior should happen when the user clicks on the data graphic
     * generated via the above displayType?
     */
    onClickHandlerKey?: OnClickHandlerKeys;
    /**
     * If onClickHandlerKey is OpenBrowserWindow, this formula calculates the URL to open.
     */
    linkFormula?: string;
}
/**
 * Configuration settings for how to display a particular field on the card itself.
 * Currently only used for adding custom data graphics with stencils.
 */
export interface LucidCardFieldDisplaySettings {
    stencilConfig?: StencilConfig;
}
/** @ignore */
export declare type SerializedLucidCardFieldDisplaySettings = {
    'StencilConfig'?: {
        /** Since renamed to displayType, but we can't change the serialized name */
        'getterKey': FieldDisplayType;
        'bg'?: string;
        'f'?: string;
        't'?: string;
        'l'?: string;
        'h'?: HorizontalBadgePos;
        'v'?: VerticalBadgePos;
        'onClickHandlerKey'?: OnClickHandlerKeys;
    };
};
/** @ignore */
export declare function serializeLucidCardFieldDisplaySettings(settings: LucidCardFieldDisplaySettings): SerializedLucidCardFieldDisplaySettings;
/** @ignore */
export declare function deserializeLucidCardFieldDisplaySettings(settings: SerializedLucidCardFieldDisplaySettings): LucidCardFieldDisplaySettings;
