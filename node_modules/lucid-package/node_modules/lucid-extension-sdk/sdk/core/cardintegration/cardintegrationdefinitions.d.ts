import { FieldDefinition } from '../../data/schemadefinition';
import { isString } from '../checks';
import { isSerializedFieldTypeDefinition } from '../data/fieldtypedefinition/fieldtypedefinition';
import { FieldConstraintType, SerializedFieldDefinition } from '../data/serializedfield/serializedfielddefinition';
import { isSerializedFieldType, SerializedFieldType } from '../data/serializedfield/serializedfields';
/** For fields with Option or ApiOption type, the label and value for each available option */
export interface ExtensionCardFieldOption {
    label: string;
    value: SerializedFieldType;
}
export interface ExtensionCardFieldDefinition extends FieldDefinition {
    /** The label to display in the UI */
    label: string;
    /** If defined, the default value for this field */
    default?: SerializedFieldType;
    /** Additional information we can provide to users, e.g. as a hover tooltip */
    description?: string | undefined;
    /**
     * If specified, the list of options available to choose from, or the name
     * of a registered action that returns the list of options (either directly
     * or as a Promise).
     */
    options?: ExtensionCardFieldOption[] | string | undefined;
    /**
     * If specified, an action that takes the search text and input so far, and
     * returns the list of options that should be displayed. This is useful when
     * there are too many possible options to reasonably use the "options"
     * option for options.
     */
    search?: string | undefined;
}
/** @ignore */
export declare type SerializedCardFieldOption = {
    'l': string;
    'v'?: SerializedFieldType;
};
/** @ignore */
export declare function serializeCardFieldOption(option: ExtensionCardFieldOption): SerializedCardFieldOption;
/** @ignore */
export declare type SerializedExtensionCardFieldDefinition = SerializedFieldDefinition & {
    'l': string;
    'def'?: SerializedFieldType;
    'd'?: string | undefined;
    'op'?: SerializedCardFieldOption[] | string | undefined;
    's'?: string | undefined;
};
/** @ignore */
export declare function serializeCardFieldDefinition(field: ExtensionCardFieldDefinition): SerializedExtensionCardFieldDefinition;
/** @ignore */
export declare function serializeCardFieldArrayDefinition(fields: ExtensionCardFieldDefinition[]): SerializedExtensionCardFieldDefinition[];
/** @ignore */
export declare function deserializeFieldOption(option: SerializedCardFieldOption): ExtensionCardFieldOption;
export declare const isSerializedFieldOption: (subject: unknown) => subject is import("../guards").DestructureGuardedTypeObj<{
    l: typeof isString;
    v: typeof isSerializedFieldType;
}>;
export declare const isSerializedFieldOptions: (p1: unknown) => p1 is import("../guards").DestructureGuardedTypeObj<{
    l: typeof isString;
    v: typeof isSerializedFieldType;
}>[];
export declare const isSerializedFieldConstraint: (subject: unknown) => subject is import("../guards").DestructureGuardedTypeObj<{
    Type: (x: unknown) => x is FieldConstraintType;
    Details: (x: unknown) => x is number | undefined;
}>;
/** @ignore */
export declare const isSerializedExtensionCardFieldDefinition: (subject: unknown) => subject is import("../guards").DestructureGuardedTypeObj<{
    Name: typeof isString;
    Type: typeof isSerializedFieldTypeDefinition;
    Constraints: (x: unknown) => x is import("../guards").DestructureGuardedTypeObj<{
        Type: (x: unknown) => x is FieldConstraintType;
        Details: (x: unknown) => x is number | undefined;
    }>[] | undefined;
    l: typeof isString;
    d: (x: unknown) => x is string | undefined;
    def: (x: unknown) => x is SerializedFieldType;
    op: (x: unknown) => x is string | import("../guards").DestructureGuardedTypeObj<{
        l: typeof isString;
        v: typeof isSerializedFieldType;
    }>[] | undefined;
    s: (x: unknown) => x is string | undefined;
}>;
/** @ignore */
export declare function deserializeCardFieldDefinition(field: SerializedExtensionCardFieldDefinition): ExtensionCardFieldDefinition;
/** @ignore */
export declare function deserializeCardFieldArrayDefinition(fields: SerializedExtensionCardFieldDefinition[]): ExtensionCardFieldDefinition[];
