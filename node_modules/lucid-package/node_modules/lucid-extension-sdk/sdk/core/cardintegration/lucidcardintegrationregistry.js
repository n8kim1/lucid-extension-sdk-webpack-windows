"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LucidCardIntegrationRegistry = void 0;
const collectiondefinition_1 = require("../../data/collectiondefinition");
const datasourceproxy_1 = require("../../data/datasourceproxy");
const cardintegrationconfig_1 = require("./cardintegrationconfig");
const cardintegrationdefinitions_1 = require("./cardintegrationdefinitions");
class LucidCardIntegrationRegistry {
    static nextHookName() {
        return '__lucidcard__hook' + LucidCardIntegrationRegistry.nextHookId++;
    }
    static registerFieldOptionsCallback(client, callback) {
        const name = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(name, async ({ 'i': inputSoFar }) => {
            const result = await callback(new Map(inputSoFar));
            return result.map((option) => (0, cardintegrationdefinitions_1.serializeCardFieldOption)(option));
        });
        return name;
    }
    static registerFieldSearchCallback(client, callback) {
        const name = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(name, async ({ 'i': inputSoFar, 's': searchText }) => {
            const result = await callback(searchText, new Map(inputSoFar));
            return result.map((option) => (0, cardintegrationdefinitions_1.serializeCardFieldOption)(option));
        });
        return name;
    }
    /**
     * Register a card integration.
     */
    static addCardIntegration(client, cardIntegration) {
        const getFieldsActionName = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(getFieldsActionName, async (param) => {
            const dataSource = new datasourceproxy_1.DataSourceProxy(param['d'], client);
            const fields = await cardIntegration.fieldConfiguration.getAllFields(dataSource);
            return fields;
        });
        let onSelectedFieldsChangeActionName = undefined;
        const onSelectedFieldsChange = cardIntegration.fieldConfiguration.onSelectedFieldsChange;
        if (onSelectedFieldsChange) {
            onSelectedFieldsChangeActionName = LucidCardIntegrationRegistry.nextHookName();
            client.registerAction(onSelectedFieldsChangeActionName, async (param) => {
                const dataSource = new datasourceproxy_1.DataSourceProxy(param['ds'], client);
                await onSelectedFieldsChange(dataSource, param['sf']);
            });
        }
        const getDefaultConfigActionName = LucidCardIntegrationRegistry.nextHookName();
        client.registerAction(getDefaultConfigActionName, async (param) => {
            const dataSource = new datasourceproxy_1.DataSourceProxy(param['d'], client);
            return (0, cardintegrationconfig_1.serializeCardIntegrationConfig)(await cardIntegration.getDefaultConfig(dataSource));
        });
        let showIntroActionName = undefined;
        if (cardIntegration.showIntro) {
            showIntroActionName = LucidCardIntegrationRegistry.nextHookName();
            client.registerAction(showIntroActionName, cardIntegration.showIntro);
        }
        const serialized = {
            'n': cardIntegration.label,
            'dcn': cardIntegration.dataConnectorName,
            'il': cardIntegration.itemLabel,
            'isl': cardIntegration.itemsLabel,
            'u': cardIntegration.iconUrl,
            'fc': {
                'gf': getFieldsActionName,
                'osfc': onSelectedFieldsChangeActionName,
            },
            'gdc': getDefaultConfigActionName,
            'i': showIntroActionName,
        };
        if (cardIntegration.importModal) {
            const importModal = cardIntegration.importModal;
            serialized['im'] = {
                'gsf': LucidCardIntegrationRegistry.nextHookName(),
                's': LucidCardIntegrationRegistry.nextHookName(),
                'i': LucidCardIntegrationRegistry.nextHookName(),
            };
            client.registerAction(serialized['im']['gsf'], async ({ 's': searchSoFar }) => {
                const result = await importModal.getSearchFields(new Map(searchSoFar));
                return (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(result);
            });
            client.registerAction(serialized['im']['s'], async ({ 's': param }) => {
                const result = await importModal.search(new Map(param));
                return {
                    'd': (0, collectiondefinition_1.serializeCollectionDefinition)(result.data),
                    'f': (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(result.fields),
                    'm': result.partialImportMetadata && {
                        'cid': result.partialImportMetadata.collectionId,
                        'sid': result.partialImportMetadata.syncDataSourceId,
                    },
                };
            });
            client.registerAction(serialized['im']['i'], async ({ 'pks': primaryKeys, 's': searchFields }) => {
                const result = await importModal.import(primaryKeys, new Map(searchFields));
                return {
                    'c': result.collection.id,
                    'pks': result.primaryKeys,
                };
            });
        }
        if (cardIntegration.addCard) {
            const addCard = cardIntegration.addCard;
            serialized['ac'] = {
                'gif': LucidCardIntegrationRegistry.nextHookName(),
                'cc': LucidCardIntegrationRegistry.nextHookName(),
            };
            client.registerAction(serialized['ac']['gif'], async ({ 'i': inputSoFar }) => {
                const result = await addCard.getInputFields(new Map(inputSoFar));
                return (0, cardintegrationdefinitions_1.serializeCardFieldArrayDefinition)(result);
            });
            client.registerAction(serialized['ac']['cc'], async ({ 'i': input }) => {
                const result = await addCard.createCardData(new Map(input));
                return {
                    'c': result.collection.id,
                    'pk': result.primaryKey,
                };
            });
        }
        client.sendCommand("aci" /* CommandName.AddCardIntegration */, serialized);
    }
}
exports.LucidCardIntegrationRegistry = LucidCardIntegrationRegistry;
LucidCardIntegrationRegistry.nextHookId = 0;
