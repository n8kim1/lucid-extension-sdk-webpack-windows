import { LinkUnfurlBlockProxy } from '../../document/blockclasses/linkunfurlblockproxy';
import { UnfurlDetails } from './unfurldetails';
import { UnfurlRefreshErrorType } from './unfurlrefresherrortype';
export declare enum UnfurlCallbackType {
    Unfurl = "u",
    AfterUnfurl = "a"
}
/**
 * The callbacks that handle unfurls and refreshing.
 */
export interface UnfurlCallbacks {
    /**
     * Callback upon initial unfurl.
     *
     * This should return with minimal delay to get a partial unfurl shown to the user as quick as possible.
     * Final configuration of the unfurl should be done in afterUnfurlCallback.
     *
     * This callback is also used for refresh to re-fetch the information
     *
     * @param url The url to unfurl
     * @return The details of the unfurl or undefined
     */
    unfurlCallback: (url: string) => Promise<UnfurlDetails | undefined | UnfurlRefreshErrorType>;
    /**
     * Callback after initial unfurl
     * The purpose is to allow unfurlCallback to happen quickly, while afterUnfurlCallback handles longer running process
     *
     * For example, preview image could be added in unfurlCallback,
     * but multiple thumbnails (or PDF conversion etc.) could be added in afterUnfurlCallback -
     *
     * This callback is also used for refresh to re-fetch the information
     *
     * @param blockProxy The block proxy of the unfurl block
     */
    afterUnfurlCallback?: (blockProxy: LinkUnfurlBlockProxy, url: string) => Promise<void>;
}
