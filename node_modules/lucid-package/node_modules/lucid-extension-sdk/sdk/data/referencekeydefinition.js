"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseReferenceKeyDefinition = exports.serializeReferenceKeyDefinition = exports.isCollectionReferenceKeyDefinition = void 0;
const checks_1 = require("../core/checks");
const serializedreferencekey_1 = require("../core/data/referencekeys/serializedreferencekey");
const schemadefinition_1 = require("./schemadefinition");
/** @ignore */
function isCollectionReferenceKeyDefinition(def) {
    return (0, checks_1.isString)(def.collectionId);
}
exports.isCollectionReferenceKeyDefinition = isCollectionReferenceKeyDefinition;
/** @ignore */
function serializeReferenceKeyDefinition(def) {
    if (isCollectionReferenceKeyDefinition(def)) {
        return {
            'cid': def.collectionId,
            'pk': def.primaryKey,
            'wl': def.fieldWhitelist,
            'ro': def.readonly,
        };
    }
    else {
        return {
            'sc': (0, schemadefinition_1.serializeSchemaDefinition)(def.schema),
            'n': def.name,
            'd': def.data,
        };
    }
}
exports.serializeReferenceKeyDefinition = serializeReferenceKeyDefinition;
/** @ignore */
function parseReferenceKeyDefinition(def) {
    if ((0, serializedreferencekey_1.isTypedSerializedFlattenedReference)(def)) {
        return {
            schema: (0, schemadefinition_1.parseSchemaDefinition)(def['sc']),
            name: def['n'],
            data: def['d'],
        };
    }
    else if ((0, serializedreferencekey_1.isUnTypedSerializedFlattenedReference)(def)) {
        throw new Error('Untyped serialized flattened references not implemented');
    }
    else {
        return {
            collectionId: def['cid'],
            primaryKey: def['pk'],
            fieldWhitelist: def['wl'],
            readonly: def['ro'],
        };
    }
}
exports.parseReferenceKeyDefinition = parseReferenceKeyDefinition;
