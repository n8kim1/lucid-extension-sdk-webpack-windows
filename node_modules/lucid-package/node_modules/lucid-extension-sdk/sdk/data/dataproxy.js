"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataProxy = void 0;
const mapproxy_1 = require("../document/mapproxy");
const datasourceproxy_1 = require("./datasourceproxy");
/**
 * The DataProxy class gives access to the tabular and graph data on the current Lucid document.
 *
 * Data collections are organized into data sources. One data sources is typically produced for
 * each data import, and may contain multiple collections.
 */
class DataProxy {
    constructor(client) {
        this.client = client;
        /**
         * Data sources on the current document, organized by their ID on this document. The ID will
         * remain stable for as long as the data source exists on this document, but will vary from
         * the data source ID on other documents if the same data is imported there.
         */
        this.dataSources = new mapproxy_1.MapProxy(() => this.client.sendCommand("lds" /* CommandName.ListDataSources */, undefined), (dataSourceId) => new datasourceproxy_1.DataSourceProxy(dataSourceId, this.client));
    }
    /**
     * Creates a new empty data source, which you can then add collections of data to.
     *
     * @param name Human-readable name of the new data source
     * @param sourceConfig Any configuration values that might be useful to reference later, such
     *  as the upstream origin of this data source
     * @returns the newly created data source
     */
    addDataSource(name, sourceConfig) {
        return new datasourceproxy_1.DataSourceProxy(this.client.sendCommand("cds" /* CommandName.CreateDataSource */, { 'n': name, 's': sourceConfig }), this.client);
    }
}
exports.DataProxy = DataProxy;
