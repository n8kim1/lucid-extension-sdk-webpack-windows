import { JsonSerializable } from '../core/jsonserializable';
import { MapProxy } from '../document/mapproxy';
import { PropertyStoreProxy } from '../document/propertystoreproxy';
import { EditorClient } from '../editorclient';
import { CollectionProxy } from './collectionproxy';
import { SchemaDefinition } from './schemadefinition';
/**
 * A data source represents a set of related data collections on a document. Typically one data source
 * is produced for each data import.
 */
export declare class DataSourceProxy extends PropertyStoreProxy {
    readonly id: string;
    /**
     * @param id ID of the dataSource on the current document
     * @param client
     */
    constructor(id: string, client: EditorClient);
    /**
     * The set of data collections in this data source, organized by ID on this document. The IDs will
     * remain stable for as long as the collection exists on this document, but will vary from
     * the collection ID on other documents if the same data is imported there.
     */
    readonly collections: MapProxy<string, CollectionProxy>;
    /**
     * Create a new collection as part of this data source.
     * @param name
     * @param schema
     * @returns The newly created collection
     */
    addCollection(name: string, schema: SchemaDefinition): CollectionProxy;
    /**
     * @returns A human-readable name for this data source
     */
    getName(): string;
    /**
     * @returns The source configuration values set when this data source was created
     */
    getSourceConfig(): {
        [key: string]: JsonSerializable;
    };
}
