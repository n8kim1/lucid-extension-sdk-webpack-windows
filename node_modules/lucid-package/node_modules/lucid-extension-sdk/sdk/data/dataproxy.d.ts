import { JsonSerializable } from '../core/jsonserializable';
import { MapProxy } from '../document/mapproxy';
import { EditorClient } from '../editorclient';
import { DataSourceProxy } from './datasourceproxy';
/**
 * The DataProxy class gives access to the tabular and graph data on the current Lucid document.
 *
 * Data collections are organized into data sources. One data sources is typically produced for
 * each data import, and may contain multiple collections.
 */
export declare class DataProxy {
    private readonly client;
    /**
     * Data sources on the current document, organized by their ID on this document. The ID will
     * remain stable for as long as the data source exists on this document, but will vary from
     * the data source ID on other documents if the same data is imported there.
     */
    readonly dataSources: MapProxy<string, DataSourceProxy>;
    constructor(client: EditorClient);
    /**
     * Creates a new empty data source, which you can then add collections of data to.
     *
     * @param name Human-readable name of the new data source
     * @param sourceConfig Any configuration values that might be useful to reference later, such
     *  as the upstream origin of this data source
     * @returns the newly created data source
     */
    addDataSource(name: string, sourceConfig: {
        [key: string]: JsonSerializable;
    }): DataSourceProxy;
}
