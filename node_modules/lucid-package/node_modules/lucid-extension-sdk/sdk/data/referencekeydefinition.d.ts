import { SerializedReferenceKeyType } from '../core/data/referencekeys/serializedreferencekey';
import { SerializedFieldType } from '../core/data/serializedfield/serializedfields';
import { SchemaDefinition } from './schemadefinition';
/**
 * A reference key that points to a [DataItem](#classes_data_dataitemproxy-DataItemProxy) in a
 * [Collection](#classes_data_collectionproxy-CollectionProxy). This is the most common type of
 * reference key to create.
 *
 * For more information, see the [Developer Guide](/extension-api#guide-reference-keys).
 */
export interface CollectionReferenceKeyDefinition {
    /** The ID of the collection referenced */
    collectionId: string;
    /** The [primary key](#classes_data_dataitemproxy-DataItemProxy_primarykey) of the data item referenced */
    primaryKey: string;
    /** If true, prevent the user from editing the field values of this reference key through the normal UI */
    readonly?: boolean;
    /**
     * If specified, only expose this list of fields through this reference key. This can be used to limit
     * namespace pollution in shape data from lots of unnecessary fields, or just to hide information you'd
     * prefer not to be visible in the UI or through formulas.
     */
    fieldWhitelist?: string[];
}
/**
 * A reference key that has the field values embedded directly in the reference definition. This can be
 * useful in cases when you want to have a standard schema of data associated with an element but do not
 * for whatever reason want to construct an actual [Collection](#classes_data_collectionproxy-CollectionProxy)
 * to house that data.
 */
export interface FlattenedReferenceDefinition {
    /** Name to display to the user for the reference key (what would normally be the collection name) */
    name?: string;
    /** Schema of the data stored at this key */
    schema: SchemaDefinition;
    /** Field values available at this reference key */
    data: Record<string, SerializedFieldType>;
}
export declare type ReferenceKeyDefinition = CollectionReferenceKeyDefinition | FlattenedReferenceDefinition;
/** @ignore */
export declare function isCollectionReferenceKeyDefinition(def: ReferenceKeyDefinition): def is CollectionReferenceKeyDefinition;
/** @ignore */
export declare function serializeReferenceKeyDefinition(def: ReferenceKeyDefinition): SerializedReferenceKeyType;
/** @ignore */
export declare function parseReferenceKeyDefinition(def: SerializedReferenceKeyType): ReferenceKeyDefinition;
