import { ReferenceKeyDefinition } from '../data/referencekeydefinition';
import { ReferenceKeyProxy } from '../data/referencekeyproxy';
import { EditorClient } from '../editorclient';
import { MapProxy } from './mapproxy';
import { PropertyStoreProxy } from './propertystoreproxy';
import { ShapeDataProxy } from './shapedataproxy';
/**
 * An element is anything on a Lucid document that can have properties and shape data:
 *  * [The document itself](#classes_document_documentproxy-DocumentProxy)
 *  * [Pages](#classes_document_pageproxy-PageProxy)
 *  * [Blocks](#classes_document_blockproxy-BlockProxy)
 *  * [Lines](#classes_document_lineproxy-LineProxy)
 *  * [Groups](#classes_document_groupproxy-GroupProxy)
 */
export declare class ElementProxy extends PropertyStoreProxy {
    /**
     * The shape data set directly on this element (not including any shape data inherited from the page or a containing group).
     */
    readonly shapeData: ShapeDataProxy;
    /**
     * All shape data accessible on this element, including shape data inherited from the page or a containing group.
     * This collection is read-only.
     */
    readonly allShapeData: MapProxy<string, import("..").SerializedFieldType | import("..").DataError>;
    /**
     * The set of reference keys, organized by their ID, which can be either a string or number.
     *
     * For more information, see the [Developer Guide](/extension-api#guide-reference-keys).
     */
    readonly referenceKeys: MapProxy<string | number, ReferenceKeyProxy>;
    /**
     * Set a reference key on this element, replacing any existing reference at the specified key.
     *
     * @param key
     * @param settings
     */
    setReferenceKey(key: number | string, settings: ReferenceKeyDefinition): void;
    /**
     * Remove the specified reference key from this element.
     * @param key
     */
    removeReferenceKey(key: number | string): void;
    /**
     *
     * @param id ID of this element, or `undefined` for the document itself
     * @param client
     */
    constructor(id: string | undefined, client: EditorClient);
    /**
     * @returns `true` if this element still exists on the document, or `false` otherwise
     */
    exists(): boolean;
    /**
     * Execute a formula in the context of this element
     * @param formula The formula text, e.g. "@a + @b" to add together the shape data values a and b.
     * @returns The result of the formula, or an error.
     */
    executeFormula(formula: string): import("..").SerializedFieldType | import("..").DataError;
}
