/**
 * A data structure similar to a normal Map which accesses its data through API
 * commands to the Lucid app. This structure is iterable with `for...of`.
 */
export declare class MapProxy<KEY, VALUE> {
    private readonly getKeys;
    private readonly getItem;
    constructor(getKeys: () => KEY[], getItem: (key: KEY) => VALUE);
    /** @ignore */
    [Symbol.iterator](): Iterator<[KEY, VALUE]>;
    values(): Generator<VALUE, void, unknown>;
    find(filter: (item: VALUE, key: KEY) => boolean): VALUE | undefined;
    keys(): KEY[];
    get size(): number;
    get(key: KEY): VALUE;
    first(): VALUE | undefined;
}
export declare class WriteableMapProxy<KEY, VALUE> extends MapProxy<KEY, VALUE> {
    private readonly setter;
    constructor(getKeys: () => KEY[], getItem: (key: KEY) => VALUE, setter: (key: KEY, val: VALUE, options?: SetterOptions) => void);
    set(key: KEY, value: VALUE, options?: SetterOptions): void;
}
export interface SetterOptions {
    force?: boolean;
}
