import { Point } from '../math';
import { BlockProxy } from './blockproxy';
import { ItemProxy } from './itemproxy';
import { EndpointDefinition } from './linedefinition';
import { LineTextAreaPositioning } from './linetextareapositioning';
/**
 * A line on the current Lucid document
 */
export declare class LineProxy extends ItemProxy {
    private getConnection;
    private isBlockEndpointDefinition;
    private isLineEndpointDefinition;
    private parseLineEndpointDefinition;
    private serializeLineEndpointDefinition;
    /**
     * @returns The definition of the first endpoint of this line
     */
    getEndpoint1(): EndpointDefinition & {
        x: number;
        y: number;
    };
    /**
     * @returns The definition of the second endpoint of this line
     */
    getEndpoint2(): EndpointDefinition & {
        x: number;
        y: number;
    };
    /**
     * Update the first endpoint of this line
     * @param endpoint Line endpoint definition
     */
    setEndpoint1(endpoint: EndpointDefinition): void;
    /**
     * Update the second endpoint of this line
     * @param endpoint Line endpoint definition
     */
    setEndpoint2(endpoint: EndpointDefinition): void;
    /**
     * @returns The block or line connected to the first endpoint of this line, or `undefined` if none
     */
    getUpstreamConnection(): void | BlockProxy | LineProxy | undefined;
    /**
     * @returns The block or line connected to the second endpoint of this line, or `undefined` if none
     */
    getDownstreamConnection(): void | BlockProxy | LineProxy | undefined;
    /**
     * @returns A list of lines whose endpoints are connected to this line
     */
    getConnectedLines(): LineProxy[];
    /**
     * @param relative A distance, between 0 and 1, between the first and second endpoint of this line
     * @returns The coordinate of that relative position, relative to the containing page
     */
    getRelativePosition(relative: number): Point;
    /**
     *
     * @param name
     * @returns The position of the given text area on this line, if it exists, or undefined if it does not exist.
     */
    getTextAreaPosition(name: string): LineTextAreaPositioning | undefined;
    /**
     * Updates the position of the given text area, if it exists. If not, an error is thrown.
     * @param name
     * @param position
     */
    setTextAreaPosition(name: string, position: LineTextAreaPositioning): void;
    /**
     * Adds a new text area to this line at the given location with the given initial plain text.
     * The text will be styled with the document theme, if any.
     * @param text
     * @param position
     * @returns The name of the text area added
     */
    addTextArea(text: string, position: LineTextAreaPositioning): string;
    /**
     * Deletes the given text area from the line, if it exists.
     * @param name
     */
    deleteTextArea(name: string): void;
}
