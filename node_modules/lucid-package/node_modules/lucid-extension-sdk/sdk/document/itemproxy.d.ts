import { LinearOffsetType } from '../core/offsettype';
import { EditorClient } from '../editorclient';
import { Box, Point } from '../math';
import { ElementProxy } from './elementproxy';
import { WriteableMapProxy } from './mapproxy';
/**
 * A block, line, or group on a page of the current document.
 */
export declare class ItemProxy extends ElementProxy {
    readonly id: string;
    /**
     * @param id ID of this item
     * @param client
     */
    constructor(id: string, client: EditorClient);
    /**
     * The plain text in each of the text areas on this item, organized by text area name.
     */
    readonly textAreas: WriteableMapProxy<string, string>;
    /**
     * @returns The bounding box of this item relative to its containing page. As pages may change size
     * to fit the content on them, note that these coordinates may be negative or very large.
     *
     * If this is a rotated block, the bounding box returned here is where the block would be if it were
     * unrotated.
     */
    getBoundingBox(): Box;
    /**
     * Attempts to move and resize this item to fit into the given bounding box. If this item (or another
     * item it contains) has size or aspect ratio restrictions, it may not be possible to fit the requested
     * location exactly.
     *
     * This is done by moving this item to the requested location, then attempting to resize it from the
     * bottom-right corner to the requested size.
     *
     * @param bb The bounding box to attempt to make this item fill
     */
    setBoundingBox(bb: Box): void;
    /**
     * @returns The page containing this item
     */
    getPage(): import("./pageproxy").PageProxy;
    /**
     * @returns The x/y location of this item
     */
    getLocation(): {
        x: number;
        y: number;
    };
    /**
     * Moves this item so that its upper-left corner is positioned at the given location (prior to any rotation)
     * @param location The target location
     */
    setLocation(location: Point): void;
    /**
     * Offset this item in the given direction by the given amount.
     * @param type The type of offset to apply to this item
     * @param offset The amount to offset
     */
    offset(type: LinearOffsetType, offset: Point): void;
    /**
     * Delete this item from the document
     */
    delete(): void;
    /**
     * @returns An array of blocks whose bounding boxes contain this item's upper-left corner
     */
    getContainers(): import("./blockproxy").BlockProxy[];
}
