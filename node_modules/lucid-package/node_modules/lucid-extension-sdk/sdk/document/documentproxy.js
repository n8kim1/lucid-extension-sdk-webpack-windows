"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentProxy = void 0;
const cardconfigproxy_1 = require("./documentelement/cardconfigproxy");
const documentelementtype_1 = require("./documentelement/documentelementtype");
const elementproxy_1 = require("./elementproxy");
const mapproxy_1 = require("./mapproxy");
const pageproxy_1 = require("./pageproxy");
/**
 * The currently-open Lucid document
 */
class DocumentProxy extends elementproxy_1.ElementProxy {
    constructor(client) {
        super(undefined, client);
        /**
         * The set of pages on this document, organized by ID
         */
        this.pages = new mapproxy_1.MapProxy(() => this.client.sendCommand("lp" /* CommandName.ListPages */, undefined), (pageId) => new pageproxy_1.PageProxy(pageId, this.client));
        this.cardIntegrationConfigs = new mapproxy_1.MapProxy(() => this.client.sendCommand("lde" /* CommandName.ListDocumentElements */, { 't': documentelementtype_1.DocumentElementType.TaskCardFieldsConfig }), (id) => new cardconfigproxy_1.CardConfigProxy(id, this.client));
    }
    static getNextHookName() {
        return '__documentproxy__hook' + DocumentProxy.nextHookId++;
    }
    /**
     * An iterator over all blocks on all pages of the document
     */
    *allBlocks() {
        for (const page of this.pages.values()) {
            for (const block of page.blocks.values()) {
                yield block;
            }
        }
    }
    /**
     * Add a new page to the current document
     * @param def Definition of the page to add
     * @returns The created page
     */
    addPage(def) {
        const id = this.client.sendCommand("cp" /* CommandName.CreatePage */, undefined);
        const page = new pageproxy_1.PageProxy(id, this.client);
        page.setTitle(def.title);
        return page;
    }
    /**
     * Updates the title of this document
     * @param title The new title for this document
     */
    setTitle(title) {
        this.properties.set('Title', title);
    }
    /**
     * @returns The title of this document
     */
    getTitle() {
        return this.properties.get('Title');
    }
    /**
     * Watch for new blocks, lines, or groups added to this document. The callback will
     * be called with new items created by the current user, but will not be called with items
     * created
     *
     *  - As part of a generated diagram, e.g. org chart
     *  - By another user on the same document
     *
     * @param callback
     * @returns A handle that can be passed to `unhookCreateItems`
     */
    hookCreateItems(callback) {
        const actionName = DocumentProxy.getNextHookName();
        this.client.registerAction(actionName, (msg) => {
            callback(msg['ids'].map((id) => this.client.getItemProxy(id)));
        });
        this.client.sendCommand("hci" /* CommandName.HookCreateItems */, { 'n': actionName });
        return actionName;
    }
    /**
     * @param handle Return value from `hookCreateItems`
     */
    unhookCreateItems(handle) {
        this.client.deleteAction(handle);
        this.client.sendCommand("uci" /* CommandName.UnhookCreateItems */, { 'n': handle });
    }
    /**
     * Watch for new blocks, lines, or groups deleted from this document. The callback will
     * be called with items deleted by the current user, but will not be called with items
     * deleted
     *
     *  - As part of a generated diagram, e.g. org chart
     *  - By another user on the same document
     *
     * @param callback
     * @returns A handle that can be passed to `unhookDeleteItems`
     */
    hookDeleteItems(callback) {
        const actionName = DocumentProxy.getNextHookName();
        this.client.registerAction(actionName, (msg) => {
            callback(msg['ids']);
        });
        this.client.sendCommand("hdi" /* CommandName.HookDeleteItems */, { 'n': actionName });
        return actionName;
    }
    /**
     * @param handle Return value from `hookDeleteItems`
     */
    unhookDeleteItems(handle) {
        this.client.deleteAction(handle);
        this.client.sendCommand("udi" /* CommandName.UnhookDeleteItems */, { 'n': handle });
    }
}
exports.DocumentProxy = DocumentProxy;
DocumentProxy.nextHookId = 0;
