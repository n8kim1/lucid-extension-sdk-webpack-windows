"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageProxy = void 0;
const elementproxy_1 = require("./elementproxy");
const groupproxy_1 = require("./groupproxy");
const lineproxy_1 = require("./lineproxy");
const mapproxy_1 = require("./mapproxy");
/**
 * One page in the current Lucid document
 */
class PageProxy extends elementproxy_1.ElementProxy {
    /**
     * @param id The ID of this page
     * @param client
     */
    constructor(id, client) {
        super(id, client);
        this.id = id;
        /**
         * The blocks contained directly on this page, not including ones inside groups
         */
        this.blocks = new mapproxy_1.MapProxy(() => this.client.sendCommand("lb" /* CommandName.ListBlocks */, { id: this.id }), (id) => this.client.getBlockProxy(id));
        /**
         * The lines contained directly on this page, not including ones inside groups
         */
        this.lines = new mapproxy_1.MapProxy(() => this.client.sendCommand("ll" /* CommandName.ListLines */, { id: this.id }), (id) => new lineproxy_1.LineProxy(id, this.client));
        /**
         * The groups contained directly on this page, not including ones inside groups
         */
        this.groups = new mapproxy_1.MapProxy(() => this.client.sendCommand("lg" /* CommandName.ListGroups */, { id: this.id }), (id) => new groupproxy_1.GroupProxy(id, this.client));
        /**
         * The blocks contained on this page, including ones inside groups
         */
        this.allBlocks = new mapproxy_1.MapProxy(() => this.client.sendCommand("lb" /* CommandName.ListBlocks */, { id: this.id, d: true }), (id) => this.client.getBlockProxy(id));
        /**
         * The lines contained on this page, including ones inside groups
         */
        this.allLines = new mapproxy_1.MapProxy(() => this.client.sendCommand("ll" /* CommandName.ListLines */, { id: this.id, d: true }), (id) => new lineproxy_1.LineProxy(id, this.client));
        /**
         * The groups contained on this page, including ones inside groups
         */
        this.allGroups = new mapproxy_1.MapProxy(() => this.client.sendCommand("lg" /* CommandName.ListGroups */, { id: this.id, d: true }), (id) => new groupproxy_1.GroupProxy(id, this.client));
    }
    /**
     * Add a new block to this page.
     *
     * IMPORTANT: Because code for block classes are loaded incrementally, you MUST call
     * EditorClient.loadBlockClasses with the given block class name (and wait for it to
     * resolve) before attempting to create a block. If you don't, an error will be thrown.
     *
     * @param def The definition of the new block to add
     * @returns The added block
     */
    addBlock(def) {
        const id = this.client.sendCommand("cb" /* CommandName.CreateBlock */, {
            'p': this.id,
            'c': def.className,
            's': def.stencil,
        });
        const block = this.client.getBlockProxy(id);
        block.setBoundingBox(def.boundingBox);
        if (def.properties) {
            for (const key in def.properties) {
                block.properties.set(key, def.properties[key]);
            }
        }
        if (def.fillStyle !== undefined) {
            block.setFillStyle(def.fillStyle);
        }
        if (def.lineWidth !== undefined) {
            block.setLineWidth(def.lineWidth);
        }
        return block;
    }
    /**
     * Add a new line to this page
     * @param def The definition of the new line to add
     * @returns The added line
     */
    addLine(def) {
        const id = this.client.sendCommand("cl" /* CommandName.CreateLine */, {
            'p': this.id,
        });
        const line = new lineproxy_1.LineProxy(id, this.client);
        line.setEndpoint1(def.endpoint1);
        line.setEndpoint2(def.endpoint2);
        return line;
    }
    /**
     * Updates the page of this page
     * @param title The new title for this page
     */
    setTitle(title) {
        this.properties.set('Title', title);
    }
    /**
     * @returns the title of this page
     */
    getTitle() {
        return this.properties.get('Title');
    }
    /**
     * Delete this page from the document if possible
     */
    delete() {
        this.client.sendCommand("dp" /* CommandName.DeletePage */, this.id);
    }
}
exports.PageProxy = PageProxy;
