import { StartPDFUploadRequestResponse } from '../../commandtypes';
import { UnfurlIframe } from '../../core/unfurl/unfurliframe';
import { BlockProxy } from '../blockproxy';
/**
 * This is the kind of block that appears when a link is pasted onto the canvas of a Lucid editor.
 */
export declare class LinkUnfurlBlockProxy extends BlockProxy {
    static classNameRegex: RegExp;
    /**
     * Returns the title on the block, which is the main text shown on the block.
     */
    getTitle(): string;
    /**
     * Sets the title on the block, which is the main text shown on the block.
     */
    setTitle(title: string): void;
    /**
     * Returns the name of the service the link belongs to, such as "Lucid" or "Google", as displayed below the title on
     * the block.
     */
    getProviderName(): string;
    /**
     * Sets the URL to be loaded in an iframe when the user clicks the "Expand" action on the block.
     */
    setIframe(unfurlIframe: UnfurlIframe): void;
    /**
     * Sets the main thumbnail on the block
     */
    setPreviewThumbnailUrl(thumbnailUrl: string): void;
    /**
     * Sets additional thumbnails on the block
     */
    setThumbnailUrls(thumbnails: string[]): void;
    /**
     * @ignore
     * Initiates the PDF upload for this block. The result includes an uploadUrl which you can use to upload the PDF.
     * The PDF uploaded at that url will be assocaite with this block (and any copy of it) in the editor until it is refreshed.
     */
    experimentalStartPDFUpload(): Promise<StartPDFUploadRequestResponse>;
}
/**
 * @ignore
 * @deprecated Use LinkUnfurlBlockProxy instead.
 */
export declare const ExperimentalLinkUnfurlBlockProxy: typeof LinkUnfurlBlockProxy;
/**
 * @ignore
 * @deprecated Use LinkUnfurlBlockProxy instead.
 */
export declare type ExperimentalLinkUnfurlBlockProxy = LinkUnfurlBlockProxy;
