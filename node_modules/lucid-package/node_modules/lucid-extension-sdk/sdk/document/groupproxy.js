"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupProxy = void 0;
const itemproxy_1 = require("./itemproxy");
const lineproxy_1 = require("./lineproxy");
const mapproxy_1 = require("./mapproxy");
/**
 * A group of items on a page.
 */
class GroupProxy extends itemproxy_1.ItemProxy {
    constructor() {
        super(...arguments);
        /**
         * The blocks that are directly contained in this group, organized by ID.
         */
        this.blocks = new mapproxy_1.MapProxy(() => this.client.sendCommand("lb" /* CommandName.ListBlocks */, { 'id': this.id }), (id) => this.client.getBlockProxy(id));
        /**
         * The lines that are directly contained in this group, organized by ID.
         */
        this.lines = new mapproxy_1.MapProxy(() => this.client.sendCommand("ll" /* CommandName.ListLines */, { 'id': this.id }), (id) => new lineproxy_1.LineProxy(id, this.client));
        /**
         * The groups that are directly contained in this group, organized by ID.
         */
        this.groups = new mapproxy_1.MapProxy(() => this.client.sendCommand("lg" /* CommandName.ListGroups */, { 'id': this.id }), (id) => new GroupProxy(id, this.client));
        /**
         * The blocks that are contained in this group, including those nested in deeper groups, organized by ID.
         */
        this.allBlocks = new mapproxy_1.MapProxy(() => this.client.sendCommand("lb" /* CommandName.ListBlocks */, { 'id': this.id, 'd': true }), (id) => this.client.getBlockProxy(id));
        /**
         * The lines that are contained in this group, including those nested in deeper groups, organized by ID.
         */
        this.allLines = new mapproxy_1.MapProxy(() => this.client.sendCommand("ll" /* CommandName.ListLines */, { 'id': this.id, 'd': true }), (id) => new lineproxy_1.LineProxy(id, this.client));
        /**
         * The groups that are contained in this group, including those nested in deeper groups, organized by ID.
         */
        this.allGroups = new mapproxy_1.MapProxy(() => this.client.sendCommand("lg" /* CommandName.ListGroups */, { 'id': this.id, 'd': true }), (id) => new GroupProxy(id, this.client));
    }
}
exports.GroupProxy = GroupProxy;
