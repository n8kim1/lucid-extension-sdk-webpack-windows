"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runDebugServer = exports.routeDebugServer = void 0;
const object_1 = require("../core/object");
/** @ignore */
function routeDebugServer(dataConnector, options) {
    var _a, _b;
    const express = options.express;
    const app = (_a = options.app) !== null && _a !== void 0 ? _a : options.express();
    // We can't use Express's JSON parsing because we need to send the string of the request body
    // directly for the route style flows. Some extensions compute a HMAC of from this data
    app.use(express.raw({ type: () => true }));
    const prefix = (_b = options.prefix) !== null && _b !== void 0 ? _b : '/';
    console.log(`Routing ${prefix}?kind=action (${Object.keys(dataConnector.actions).join(', ')})`);
    if (dataConnector.routes) {
        for (const routeName of Object.keys(dataConnector.routes)) {
            console.log(`Routing ${prefix}?kind=route&name=${routeName}`);
        }
    }
    app.post(prefix, async (req, res) => {
        try {
            const routeKind = req.query['kind'];
            if (routeKind === 'action') {
                const { body, status } = await dataConnector.runAction(req.url, req.headers, JSON.parse(req.body.toString()));
                res.status(status).json(body);
            }
            if (routeKind === 'route') {
                const routeName = req.query['name'];
                if (typeof routeName === 'string') {
                    const route = dataConnector.routes[routeName];
                    const reqHeaders = req.headers;
                    const { body, status, headers } = await route({
                        body: req.body.toString(),
                        headers: reqHeaders,
                        query: (0, object_1.fromEntries)((0, object_1.entries)(req.query).map(([key, value]) => [
                            key,
                            typeof value === 'string' ? value : undefined,
                        ])),
                    });
                    for (const [name, value] of (0, object_1.entries)(headers !== null && headers !== void 0 ? headers : {})) {
                        if (typeof value === 'string') {
                            res.setHeader(name, value);
                        }
                    }
                    res.status(status);
                    res.send(body);
                }
            }
        }
        catch (e) {
            console.log(`Error serving Connector: ${prefix} Flow: ${req.query['name']}, Exception:`, e);
            res.status(500).end();
        }
    });
    return app;
}
exports.routeDebugServer = routeDebugServer;
/** @ignore */
function runDebugServer(dataConnector, options) {
    var _a;
    const port = (_a = options.port) !== null && _a !== void 0 ? _a : 3001;
    routeDebugServer(dataConnector, options).listen(port, () => {
        console.log(`Listening on port ${port}`);
    });
}
exports.runDebugServer = runDebugServer;
