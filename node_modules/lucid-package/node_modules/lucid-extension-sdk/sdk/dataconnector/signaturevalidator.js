"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockSignatureValidator = exports.SignatureValidator = exports.signatureValidatorImportedNode = void 0;
// Don't import these normally, so they're resolved at runtime.
// This is so the lucid-extension-sdk can be used from a browser.
// This class only is implemented for NodeJS environments, so
// it will fail at runtime if you try to instanciate it in a browser.
// It's also exported and mutable because while this compiles and
// works in the lambda environment, for some reason it doesn't work
// in the debug server environment, so from there we import it and
// patch it up with imports that do work.
/** @ignore */
exports.signatureValidatorImportedNode = (() => {
    const Buffer = globalThis['Buffer'];
    const require = globalThis['require'];
    const crypto = require && require('crypto');
    return { 'Buffer': Buffer, 'crypto': crypto };
})();
/**
 * Allows validation that requests originated from Lucid. This class can only be instanciated in a NodeJS environment.
 * Technically any environment that provides NodeJS compatible implementations of `globalThis.Buffer` and
 * `globalThis.require('crypto')` will work.
 */
class SignatureValidator {
    constructor(publicKey) {
        if (!exports.signatureValidatorImportedNode['Buffer']) {
            throw new Error('Expect `Buffer` class to be defined');
        }
        if (!exports.signatureValidatorImportedNode['crypto']) {
            throw new Error("Expect `require('crypto')` to be defined");
        }
        this.publicKey = exports.signatureValidatorImportedNode['crypto']['createPublicKey'](publicKey);
    }
    /**
     * Validate a given request came from Lucid.
     * @param body The body of the request as a plain JavaScript object. This should be JSON.parse called on exactly the
     *             request body that came from Lucid.
     * @param headers The headers that are associated with the request. Only 'x-lucid-rsa-nonce' and 'x-lucid-signature'
     *                are required.
     * @param url     The url of the current endpoint that is being requested.
     * @returns true if the request is valid
     */
    validate(body, headers, url) {
        const parts = url.split('?');
        const params = parts.length > 0 ? parts[1] : '';
        const nonce = headers['x-lucid-rsa-nonce'];
        const signature = exports.signatureValidatorImportedNode['Buffer']['from'](headers['x-lucid-signature'], 'base64');
        const data = exports.signatureValidatorImportedNode['Buffer']['from'](JSON.stringify(body) + nonce + params);
        const verified = exports.signatureValidatorImportedNode['crypto']['verify']('SHA384', data, this.publicKey, signature);
        return verified;
    }
}
exports.SignatureValidator = SignatureValidator;
/** Mock signature validator, always returns true. */
class MockSignatureValidator {
    constructor() {
        this.publicKey = false;
    }
    /** Returns true */
    validate() {
        return true;
    }
}
exports.MockSignatureValidator = MockSignatureValidator;
